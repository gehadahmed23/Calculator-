
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001860  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001860  000018f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800088  00800088  0000191c  2**0
                  ALLOC
  3 .stab         000033e4  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  00004d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000056b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a0  00000000  00000000  00005830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000506  00000000  00000000  00006ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b60  00000000  00000000  00006fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00007b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000345  00000000  00000000  00007e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001191  00000000  00000000  0000815d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000092ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	lds	r29, 0x78
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	sts	0xb8, r17
      62:	ba ab       	sts	0x5a, r27
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	sts	0x9b, r26
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	sts	0x5e, r27
      96:	aa aa       	sts	0x9a, r26
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	sts	0x41, r30
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <LCD_vSend_string+0x14>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e0 e6       	ldi	r30, 0x60	; 96
      ea:	f8 e1       	ldi	r31, 0x18	; 24
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a8 38       	cpi	r26, 0x88	; 136
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	a8 e8       	ldi	r26, 0x88	; 136
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a9 38       	cpi	r26, 0x89	; 137
     104:	b1 07       	cpc	r27, r17
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 8a 00 	call	0x114	; 0x114 <main>
     10c:	0c 94 2e 0c 	jmp	0x185c	; 0x185c <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <main>:
#include "HAL/LCD/LCD_int.h"
#include <math.h>
#include <stdio.h>
u8 ln = 0;
int main(void)
{
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
     11c:	e1 97       	sbiw	r28, 0x31	; 49
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	f8 94       	cli
     122:	de bf       	out	0x3e, r29	; 62
     124:	0f be       	out	0x3f, r0	; 63
     126:	cd bf       	out	0x3d, r28	; 61
	LCD_vInit();
     128:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_vInit>
	keypad_vInit();
     12c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <keypad_vInit>
	u8 c = 255, op,Neg1= 0, Neg2 = 0, fl = 0;
	s32 x = 0, y = 0, f = 0, f1 = 0, f2 = 0, f3 = 0, a = 0;
     130:	44 24       	eor	r4, r4
     132:	55 24       	eor	r5, r5
     134:	32 01       	movw	r6, r4
     136:	19 a2       	lds	r17, 0x99
     138:	1a a2       	lds	r17, 0x9a
     13a:	1b a2       	lds	r17, 0x9b
     13c:	1c a2       	lds	r17, 0x9c
     13e:	1d a2       	lds	r17, 0x9d
     140:	1e a2       	lds	r17, 0x9e
     142:	1f a2       	lds	r17, 0x9f
     144:	18 a6       	lds	r17, 0xb8
     146:	1d 8a       	std	Y+21, r1	; 0x15
     148:	1e 8a       	std	Y+22, r1	; 0x16
     14a:	1f 8a       	std	Y+23, r1	; 0x17
     14c:	18 8e       	std	Y+24, r1	; 0x18
     14e:	88 24       	eor	r8, r8
     150:	99 24       	eor	r9, r9
     152:	54 01       	movw	r10, r8
     154:	1d 8e       	std	Y+29, r1	; 0x1d
     156:	1e 8e       	std	Y+30, r1	; 0x1e
     158:	1f 8e       	std	Y+31, r1	; 0x1f
     15a:	18 a2       	lds	r17, 0x98
     15c:	19 8e       	std	Y+25, r1	; 0x19
     15e:	1a 8e       	std	Y+26, r1	; 0x1a
     160:	1b 8e       	std	Y+27, r1	; 0x1b
     162:	1c 8e       	std	Y+28, r1	; 0x1c
u8 ln = 0;
int main(void)
{
	LCD_vInit();
	keypad_vInit();
	u8 c = 255, op,Neg1= 0, Neg2 = 0, fl = 0;
     164:	19 a6       	lds	r17, 0xb9
     166:	33 24       	eor	r3, r3
     168:	00 e0       	ldi	r16, 0x00	; 0
					}
					else{
					  LCD_vWriteNum(z);
					}
					LCD_vSendCMD(0x0c);
					a = 0;
     16a:	cc 24       	eor	r12, r12
     16c:	dd 24       	eor	r13, r13
     16e:	76 01       	movw	r14, r12
	keypad_vInit();
	u8 c = 255, op,Neg1= 0, Neg2 = 0, fl = 0;
	s32 x = 0, y = 0, f = 0, f1 = 0, f2 = 0, f3 = 0, a = 0;
	while(1)
	{
		c = keypad_u8check_press();
     170:	0e 94 61 03 	call	0x6c2	; 0x6c2 <keypad_u8check_press>
     174:	18 2f       	mov	r17, r24
		if(a == 1){
     176:	21 e0       	ldi	r18, 0x01	; 1
     178:	42 16       	cp	r4, r18
     17a:	51 04       	cpc	r5, r1
     17c:	61 04       	cpc	r6, r1
     17e:	71 04       	cpc	r7, r1
     180:	09 f0       	breq	.+2      	; 0x184 <main+0x70>
     182:	6c c2       	rjmp	.+1240   	; 0x65c <main+0x548>
			if(c == '-' && f == 0){
     184:	8d 32       	cpi	r24, 0x2D	; 45
     186:	59 f4       	brne	.+22     	; 0x19e <main+0x8a>
     188:	81 14       	cp	r8, r1
     18a:	91 04       	cpc	r9, r1
     18c:	a1 04       	cpc	r10, r1
     18e:	b1 04       	cpc	r11, r1
     190:	09 f0       	breq	.+2      	; 0x194 <main+0x80>
     192:	8c c2       	rjmp	.+1304   	; 0x6ac <main+0x598>
				Neg1 = 1;
				LCD_vSendChar(c);
     194:	8d e2       	ldi	r24, 0x2D	; 45
     196:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
	while(1)
	{
		c = keypad_u8check_press();
		if(a == 1){
			if(c == '-' && f == 0){
				Neg1 = 1;
     19a:	01 e0       	ldi	r16, 0x01	; 1
				LCD_vSendChar(c);
     19c:	e9 cf       	rjmp	.-46     	; 0x170 <main+0x5c>
			}
			else if(c >= 48 && c <= 57 && f == 0)
     19e:	80 53       	subi	r24, 0x30	; 48
     1a0:	8a 30       	cpi	r24, 0x0A	; 10
     1a2:	08 f0       	brcs	.+2      	; 0x1a6 <main+0x92>
     1a4:	55 c0       	rjmp	.+170    	; 0x250 <main+0x13c>
     1a6:	81 14       	cp	r8, r1
     1a8:	91 04       	cpc	r9, r1
     1aa:	a1 04       	cpc	r10, r1
     1ac:	b1 04       	cpc	r11, r1
     1ae:	29 f5       	brne	.+74     	; 0x1fa <main+0xe6>
			{
				x = (x * 10) + (c - 48);
     1b0:	69 8d       	ldd	r22, Y+25	; 0x19
     1b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     1b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1b8:	2a e0       	ldi	r18, 0x0A	; 10
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__mulsi3>
     1c4:	ab 01       	movw	r20, r22
     1c6:	bc 01       	movw	r22, r24
     1c8:	81 2f       	mov	r24, r17
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	c0 97       	sbiw	r24, 0x30	; 48
     1ce:	aa 27       	eor	r26, r26
     1d0:	97 fd       	sbrc	r25, 7
     1d2:	a0 95       	com	r26
     1d4:	ba 2f       	mov	r27, r26
     1d6:	4a 01       	movw	r8, r20
     1d8:	5b 01       	movw	r10, r22
     1da:	88 0e       	add	r8, r24
     1dc:	99 1e       	adc	r9, r25
     1de:	aa 1e       	adc	r10, r26
     1e0:	bb 1e       	adc	r11, r27
     1e2:	89 8e       	std	Y+25, r8	; 0x19
     1e4:	9a 8e       	std	Y+26, r9	; 0x1a
     1e6:	ab 8e       	std	Y+27, r10	; 0x1b
     1e8:	bc 8e       	std	Y+28, r11	; 0x1c
				LCD_vSendChar(c);
     1ea:	81 2f       	mov	r24, r17
     1ec:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
				f = 1;
     1f0:	88 24       	eor	r8, r8
     1f2:	99 24       	eor	r9, r9
     1f4:	54 01       	movw	r10, r8
     1f6:	83 94       	inc	r8
     1f8:	31 c2       	rjmp	.+1122   	; 0x65c <main+0x548>
			}
			else if(c >= 48 && c <= 57 && f == 1)
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	82 16       	cp	r8, r18
     1fe:	91 04       	cpc	r9, r1
     200:	a1 04       	cpc	r10, r1
     202:	b1 04       	cpc	r11, r1
     204:	29 f5       	brne	.+74     	; 0x250 <main+0x13c>
			{
				x = (x * 10) + (c - 48);
     206:	69 8d       	ldd	r22, Y+25	; 0x19
     208:	7a 8d       	ldd	r23, Y+26	; 0x1a
     20a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     20c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     20e:	2a e0       	ldi	r18, 0x0A	; 10
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__mulsi3>
     21a:	69 8f       	std	Y+25, r22	; 0x19
     21c:	7a 8f       	std	Y+26, r23	; 0x1a
     21e:	8b 8f       	std	Y+27, r24	; 0x1b
     220:	9c 8f       	std	Y+28, r25	; 0x1c
     222:	81 2f       	mov	r24, r17
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	c0 97       	sbiw	r24, 0x30	; 48
     228:	aa 27       	eor	r26, r26
     22a:	97 fd       	sbrc	r25, 7
     22c:	a0 95       	com	r26
     22e:	ba 2f       	mov	r27, r26
     230:	29 8d       	ldd	r18, Y+25	; 0x19
     232:	3a 8d       	ldd	r19, Y+26	; 0x1a
     234:	4b 8d       	ldd	r20, Y+27	; 0x1b
     236:	5c 8d       	ldd	r21, Y+28	; 0x1c
     238:	28 0f       	add	r18, r24
     23a:	39 1f       	adc	r19, r25
     23c:	4a 1f       	adc	r20, r26
     23e:	5b 1f       	adc	r21, r27
     240:	29 8f       	std	Y+25, r18	; 0x19
     242:	3a 8f       	std	Y+26, r19	; 0x1a
     244:	4b 8f       	std	Y+27, r20	; 0x1b
     246:	5c 8f       	std	Y+28, r21	; 0x1c
				LCD_vSendChar(c);
     248:	81 2f       	mov	r24, r17
     24a:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
     24e:	06 c2       	rjmp	.+1036   	; 0x65c <main+0x548>
				
			}
			else if( f == 2 && f1 == 0 && c == '-'){
     250:	32 e0       	ldi	r19, 0x02	; 2
     252:	83 16       	cp	r8, r19
     254:	91 04       	cpc	r9, r1
     256:	a1 04       	cpc	r10, r1
     258:	b1 04       	cpc	r11, r1
     25a:	89 f4       	brne	.+34     	; 0x27e <main+0x16a>
     25c:	2d 89       	ldd	r18, Y+21	; 0x15
     25e:	3e 89       	ldd	r19, Y+22	; 0x16
     260:	4f 89       	ldd	r20, Y+23	; 0x17
     262:	58 8d       	ldd	r21, Y+24	; 0x18
     264:	21 15       	cp	r18, r1
     266:	31 05       	cpc	r19, r1
     268:	41 05       	cpc	r20, r1
     26a:	51 05       	cpc	r21, r1
     26c:	41 f4       	brne	.+16     	; 0x27e <main+0x16a>
     26e:	1d 32       	cpi	r17, 0x2D	; 45
     270:	31 f4       	brne	.+12     	; 0x27e <main+0x16a>
				Neg2 = 1;
				LCD_vSendChar(c);
     272:	8d e2       	ldi	r24, 0x2D	; 45
     274:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
				x = (x * 10) + (c - 48);
				LCD_vSendChar(c);
				
			}
			else if( f == 2 && f1 == 0 && c == '-'){
				Neg2 = 1;
     278:	33 24       	eor	r3, r3
     27a:	33 94       	inc	r3
				LCD_vSendChar(c);
     27c:	79 cf       	rjmp	.-270    	; 0x170 <main+0x5c>
			}
			else if(c >= 48 && c <= 57 && f == 2 && f1 == 0)
     27e:	8a 30       	cpi	r24, 0x0A	; 10
     280:	08 f0       	brcs	.+2      	; 0x284 <main+0x170>
     282:	69 c0       	rjmp	.+210    	; 0x356 <main+0x242>
     284:	32 e0       	ldi	r19, 0x02	; 2
     286:	83 16       	cp	r8, r19
     288:	91 04       	cpc	r9, r1
     28a:	a1 04       	cpc	r10, r1
     28c:	b1 04       	cpc	r11, r1
     28e:	a9 f5       	brne	.+106    	; 0x2fa <main+0x1e6>
     290:	8d 89       	ldd	r24, Y+21	; 0x15
     292:	9e 89       	ldd	r25, Y+22	; 0x16
     294:	af 89       	ldd	r26, Y+23	; 0x17
     296:	b8 8d       	ldd	r27, Y+24	; 0x18
     298:	00 97       	sbiw	r24, 0x00	; 0
     29a:	a1 05       	cpc	r26, r1
     29c:	b1 05       	cpc	r27, r1
     29e:	69 f5       	brne	.+90     	; 0x2fa <main+0x1e6>
			{
				y = (y * 10) + (c - 48);
     2a0:	6d 8d       	ldd	r22, Y+29	; 0x1d
     2a2:	7e 8d       	ldd	r23, Y+30	; 0x1e
     2a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2a6:	98 a1       	lds	r25, 0x48
     2a8:	2a e0       	ldi	r18, 0x0A	; 10
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__mulsi3>
     2b4:	6d 8b       	std	Y+21, r22	; 0x15
     2b6:	7e 8b       	std	Y+22, r23	; 0x16
     2b8:	8f 8b       	std	Y+23, r24	; 0x17
     2ba:	98 8f       	std	Y+24, r25	; 0x18
     2bc:	81 2f       	mov	r24, r17
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	c0 97       	sbiw	r24, 0x30	; 48
     2c2:	aa 27       	eor	r26, r26
     2c4:	97 fd       	sbrc	r25, 7
     2c6:	a0 95       	com	r26
     2c8:	ba 2f       	mov	r27, r26
     2ca:	2d 89       	ldd	r18, Y+21	; 0x15
     2cc:	3e 89       	ldd	r19, Y+22	; 0x16
     2ce:	4f 89       	ldd	r20, Y+23	; 0x17
     2d0:	58 8d       	ldd	r21, Y+24	; 0x18
     2d2:	28 0f       	add	r18, r24
     2d4:	39 1f       	adc	r19, r25
     2d6:	4a 1f       	adc	r20, r26
     2d8:	5b 1f       	adc	r21, r27
     2da:	2d 8f       	std	Y+29, r18	; 0x1d
     2dc:	3e 8f       	std	Y+30, r19	; 0x1e
     2de:	4f 8f       	std	Y+31, r20	; 0x1f
     2e0:	58 a3       	lds	r21, 0x58
				LCD_vSendChar(c);
     2e2:	81 2f       	mov	r24, r17
     2e4:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
				f1 = 1;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	a0 e0       	ldi	r26, 0x00	; 0
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	8d 8b       	std	Y+21, r24	; 0x15
     2f2:	9e 8b       	std	Y+22, r25	; 0x16
     2f4:	af 8b       	std	Y+23, r26	; 0x17
     2f6:	b8 8f       	std	Y+24, r27	; 0x18
     2f8:	b1 c1       	rjmp	.+866    	; 0x65c <main+0x548>
			}
			else if(c >= 48 && c <= 57 && f1 == 1)
     2fa:	2d 89       	ldd	r18, Y+21	; 0x15
     2fc:	3e 89       	ldd	r19, Y+22	; 0x16
     2fe:	4f 89       	ldd	r20, Y+23	; 0x17
     300:	58 8d       	ldd	r21, Y+24	; 0x18
     302:	21 30       	cpi	r18, 0x01	; 1
     304:	31 05       	cpc	r19, r1
     306:	41 05       	cpc	r20, r1
     308:	51 05       	cpc	r21, r1
     30a:	29 f5       	brne	.+74     	; 0x356 <main+0x242>
			{
				y = (y * 10) + (c - 48);
     30c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     30e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     310:	8f 8d       	ldd	r24, Y+31	; 0x1f
     312:	98 a1       	lds	r25, 0x48
     314:	2a e0       	ldi	r18, 0x0A	; 10
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__mulsi3>
     320:	6d 8f       	std	Y+29, r22	; 0x1d
     322:	7e 8f       	std	Y+30, r23	; 0x1e
     324:	8f 8f       	std	Y+31, r24	; 0x1f
     326:	98 a3       	lds	r25, 0x58
     328:	81 2f       	mov	r24, r17
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	c0 97       	sbiw	r24, 0x30	; 48
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	2d 8d       	ldd	r18, Y+29	; 0x1d
     338:	3e 8d       	ldd	r19, Y+30	; 0x1e
     33a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     33c:	58 a1       	lds	r21, 0x48
     33e:	28 0f       	add	r18, r24
     340:	39 1f       	adc	r19, r25
     342:	4a 1f       	adc	r20, r26
     344:	5b 1f       	adc	r21, r27
     346:	2d 8f       	std	Y+29, r18	; 0x1d
     348:	3e 8f       	std	Y+30, r19	; 0x1e
     34a:	4f 8f       	std	Y+31, r20	; 0x1f
     34c:	58 a3       	lds	r21, 0x58
				LCD_vSendChar(c);
     34e:	81 2f       	mov	r24, r17
     350:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
     354:	83 c1       	rjmp	.+774    	; 0x65c <main+0x548>
			}
			else if(((c == '+' )|| (c == '-') || (c == '*') || (c == '/') || (c == '=')) && f == 0)
     356:	1b 32       	cpi	r17, 0x2B	; 43
     358:	41 f0       	breq	.+16     	; 0x36a <main+0x256>
     35a:	1d 32       	cpi	r17, 0x2D	; 45
     35c:	31 f0       	breq	.+12     	; 0x36a <main+0x256>
     35e:	1a 32       	cpi	r17, 0x2A	; 42
     360:	21 f0       	breq	.+8      	; 0x36a <main+0x256>
     362:	1f 32       	cpi	r17, 0x2F	; 47
     364:	11 f0       	breq	.+4      	; 0x36a <main+0x256>
     366:	1d 33       	cpi	r17, 0x3D	; 61
     368:	a9 f4       	brne	.+42     	; 0x394 <main+0x280>
     36a:	81 14       	cp	r8, r1
     36c:	91 04       	cpc	r9, r1
     36e:	a1 04       	cpc	r10, r1
     370:	b1 04       	cpc	r11, r1
     372:	61 f4       	brne	.+24     	; 0x38c <main+0x278>
			{
				LCD_vSendChar(c);
     374:	81 2f       	mov	r24, r17
     376:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
				f3 = 1;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	a0 e0       	ldi	r26, 0x00	; 0
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	89 a3       	lds	r24, 0x59
     384:	9a a3       	lds	r25, 0x5a
     386:	ab a3       	lds	r26, 0x5b
     388:	bc a3       	lds	r27, 0x5c
     38a:	68 c1       	rjmp	.+720    	; 0x65c <main+0x548>
			}
			else if(((c == '+' )|| (c == '-') || (c == '*') || (c == '/')) && f == 2)
     38c:	1b 32       	cpi	r17, 0x2B	; 43
     38e:	31 f0       	breq	.+12     	; 0x39c <main+0x288>
     390:	1d 32       	cpi	r17, 0x2D	; 45
     392:	21 f0       	breq	.+8      	; 0x39c <main+0x288>
     394:	1a 32       	cpi	r17, 0x2A	; 42
     396:	11 f0       	breq	.+4      	; 0x39c <main+0x288>
     398:	1f 32       	cpi	r17, 0x2F	; 47
     39a:	b1 f4       	brne	.+44     	; 0x3c8 <main+0x2b4>
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	89 16       	cp	r8, r25
     3a0:	91 04       	cpc	r9, r1
     3a2:	a1 04       	cpc	r10, r1
     3a4:	b1 04       	cpc	r11, r1
     3a6:	61 f4       	brne	.+24     	; 0x3c0 <main+0x2ac>
			{
				LCD_vSendChar(c);
     3a8:	81 2f       	mov	r24, r17
     3aa:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
				f3 = 1;
     3ae:	21 e0       	ldi	r18, 0x01	; 1
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	29 a3       	lds	r18, 0x59
     3b8:	3a a3       	lds	r19, 0x5a
     3ba:	4b a3       	lds	r20, 0x5b
     3bc:	5c a3       	lds	r21, 0x5c
     3be:	4e c1       	rjmp	.+668    	; 0x65c <main+0x548>
			}
			else if(((c == '+' )|| (c == '-') || (c == '*') || (c == '/')) && f == 1)
     3c0:	1b 32       	cpi	r17, 0x2B	; 43
     3c2:	31 f0       	breq	.+12     	; 0x3d0 <main+0x2bc>
     3c4:	1d 32       	cpi	r17, 0x2D	; 45
     3c6:	21 f0       	breq	.+8      	; 0x3d0 <main+0x2bc>
     3c8:	1a 32       	cpi	r17, 0x2A	; 42
     3ca:	11 f0       	breq	.+4      	; 0x3d0 <main+0x2bc>
     3cc:	1f 32       	cpi	r17, 0x2F	; 47
     3ce:	81 f4       	brne	.+32     	; 0x3f0 <main+0x2dc>
     3d0:	31 e0       	ldi	r19, 0x01	; 1
     3d2:	83 16       	cp	r8, r19
     3d4:	91 04       	cpc	r9, r1
     3d6:	a1 04       	cpc	r10, r1
     3d8:	b1 04       	cpc	r11, r1
     3da:	51 f4       	brne	.+20     	; 0x3f0 <main+0x2dc>
			{
				op = c;  f = 2;
				LCD_vSendChar(c);
     3dc:	81 2f       	mov	r24, r17
     3de:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
				LCD_vSendChar(c);
				f3 = 1;
			}
			else if(((c == '+' )|| (c == '-') || (c == '*') || (c == '/')) && f == 1)
			{
				op = c;  f = 2;
     3e2:	21 2e       	mov	r2, r17
     3e4:	88 24       	eor	r8, r8
     3e6:	99 24       	eor	r9, r9
     3e8:	54 01       	movw	r10, r8
     3ea:	68 94       	set
     3ec:	81 f8       	bld	r8, 1
				LCD_vSendChar(c);
     3ee:	36 c1       	rjmp	.+620    	; 0x65c <main+0x548>
			}
			else if(((c == '=')) && (f == 1))
     3f0:	1d 33       	cpi	r17, 0x3D	; 61
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <main+0x2e2>
     3f4:	33 c1       	rjmp	.+614    	; 0x65c <main+0x548>
     3f6:	41 e0       	ldi	r20, 0x01	; 1
     3f8:	84 16       	cp	r8, r20
     3fa:	91 04       	cpc	r9, r1
     3fc:	a1 04       	cpc	r10, r1
     3fe:	b1 04       	cpc	r11, r1
     400:	81 f4       	brne	.+32     	; 0x422 <main+0x30e>
			{
				LCD_clearscreen();
     402:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_clearscreen>
				LCD_vGoTo(1, 3);
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	63 e0       	ldi	r22, 0x03	; 3
     40a:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_vGoTo>
				LCD_vSendCMD(0x0c);
     40e:	8c e0       	ldi	r24, 0x0C	; 12
     410:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
				LCD_vSend_string("syntax error");
     414:	80 e6       	ldi	r24, 0x60	; 96
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSend_string>
				a = 0;
     41c:	26 01       	movw	r4, r12
     41e:	37 01       	movw	r6, r14
     420:	a7 ce       	rjmp	.-690    	; 0x170 <main+0x5c>
				
			}
			else if(c == '=')
			{
				if(f3 == 1){
     422:	89 a1       	lds	r24, 0x49
     424:	9a a1       	lds	r25, 0x4a
     426:	ab a1       	lds	r26, 0x4b
     428:	bc a1       	lds	r27, 0x4c
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	91 05       	cpc	r25, r1
     42e:	a1 05       	cpc	r26, r1
     430:	b1 05       	cpc	r27, r1
     432:	81 f4       	brne	.+32     	; 0x454 <main+0x340>
					LCD_clearscreen();
     434:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_clearscreen>
					LCD_vGoTo(1, 3);
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	63 e0       	ldi	r22, 0x03	; 3
     43c:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_vGoTo>
					LCD_vSendCMD(0x0c);
     440:	8c e0       	ldi	r24, 0x0C	; 12
     442:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
					LCD_vSend_string("syntax error");
     446:	80 e6       	ldi	r24, 0x60	; 96
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSend_string>
					a = 0;
     44e:	26 01       	movw	r4, r12
     450:	37 01       	movw	r6, r14
     452:	8e ce       	rjmp	.-740    	; 0x170 <main+0x5c>
				}
				else
				{
					if(Neg1)x *= -1;
     454:	00 23       	and	r16, r16
     456:	79 f0       	breq	.+30     	; 0x476 <main+0x362>
     458:	29 8d       	ldd	r18, Y+25	; 0x19
     45a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     45c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     45e:	5c 8d       	ldd	r21, Y+28	; 0x1c
     460:	50 95       	com	r21
     462:	40 95       	com	r20
     464:	30 95       	com	r19
     466:	21 95       	neg	r18
     468:	3f 4f       	sbci	r19, 0xFF	; 255
     46a:	4f 4f       	sbci	r20, 0xFF	; 255
     46c:	5f 4f       	sbci	r21, 0xFF	; 255
     46e:	29 8f       	std	Y+25, r18	; 0x19
     470:	3a 8f       	std	Y+26, r19	; 0x1a
     472:	4b 8f       	std	Y+27, r20	; 0x1b
     474:	5c 8f       	std	Y+28, r21	; 0x1c
					if(Neg2)y *= -1;
     476:	33 20       	and	r3, r3
     478:	79 f0       	breq	.+30     	; 0x498 <main+0x384>
     47a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     47c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     47e:	af 8d       	ldd	r26, Y+31	; 0x1f
     480:	b8 a1       	lds	r27, 0x48
     482:	b0 95       	com	r27
     484:	a0 95       	com	r26
     486:	90 95       	com	r25
     488:	81 95       	neg	r24
     48a:	9f 4f       	sbci	r25, 0xFF	; 255
     48c:	af 4f       	sbci	r26, 0xFF	; 255
     48e:	bf 4f       	sbci	r27, 0xFF	; 255
     490:	8d 8f       	std	Y+29, r24	; 0x1d
     492:	9e 8f       	std	Y+30, r25	; 0x1e
     494:	af 8f       	std	Y+31, r26	; 0x1f
     496:	b8 a3       	lds	r27, 0x58
					s32 z;
					double d;
					if(op == '+')
     498:	9b e2       	ldi	r25, 0x2B	; 43
     49a:	29 16       	cp	r2, r25
     49c:	89 f4       	brne	.+34     	; 0x4c0 <main+0x3ac>
					{
						z = x + y;
     49e:	29 8d       	ldd	r18, Y+25	; 0x19
     4a0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     4a2:	4b 8d       	ldd	r20, Y+27	; 0x1b
     4a4:	5c 8d       	ldd	r21, Y+28	; 0x1c
     4a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4aa:	af 8d       	ldd	r26, Y+31	; 0x1f
     4ac:	b8 a1       	lds	r27, 0x48
     4ae:	28 0f       	add	r18, r24
     4b0:	39 1f       	adc	r19, r25
     4b2:	4a 1f       	adc	r20, r26
     4b4:	5b 1f       	adc	r21, r27
     4b6:	2a a7       	lds	r18, 0x7a
     4b8:	3b a7       	lds	r19, 0x7b
     4ba:	4c a7       	lds	r20, 0x7c
     4bc:	5d a7       	lds	r21, 0x7d
     4be:	8a c0       	rjmp	.+276    	; 0x5d4 <main+0x4c0>
					}
					else if(op == '-'){z = x - y;}
     4c0:	9d e2       	ldi	r25, 0x2D	; 45
     4c2:	29 16       	cp	r2, r25
     4c4:	89 f4       	brne	.+34     	; 0x4e8 <main+0x3d4>
     4c6:	29 8d       	ldd	r18, Y+25	; 0x19
     4c8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     4ca:	4b 8d       	ldd	r20, Y+27	; 0x1b
     4cc:	5c 8d       	ldd	r21, Y+28	; 0x1c
     4ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
     4d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     4d2:	af 8d       	ldd	r26, Y+31	; 0x1f
     4d4:	b8 a1       	lds	r27, 0x48
     4d6:	28 1b       	sub	r18, r24
     4d8:	39 0b       	sbc	r19, r25
     4da:	4a 0b       	sbc	r20, r26
     4dc:	5b 0b       	sbc	r21, r27
     4de:	2a a7       	lds	r18, 0x7a
     4e0:	3b a7       	lds	r19, 0x7b
     4e2:	4c a7       	lds	r20, 0x7c
     4e4:	5d a7       	lds	r21, 0x7d
     4e6:	76 c0       	rjmp	.+236    	; 0x5d4 <main+0x4c0>
				else if(op == '*')
     4e8:	9a e2       	ldi	r25, 0x2A	; 42
     4ea:	29 16       	cp	r2, r25
     4ec:	79 f4       	brne	.+30     	; 0x50c <main+0x3f8>
				{
					z = (x * y);
     4ee:	69 8d       	ldd	r22, Y+25	; 0x19
     4f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4f6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     4f8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     4fa:	4f 8d       	ldd	r20, Y+31	; 0x1f
     4fc:	58 a1       	lds	r21, 0x48
     4fe:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__mulsi3>
     502:	6a a7       	lds	r22, 0x7a
     504:	7b a7       	lds	r23, 0x7b
     506:	8c a7       	lds	r24, 0x7c
     508:	9d a7       	lds	r25, 0x7d
     50a:	64 c0       	rjmp	.+200    	; 0x5d4 <main+0x4c0>
				}
				else if(op == '/')
     50c:	af e2       	ldi	r26, 0x2F	; 47
     50e:	2a 16       	cp	r2, r26
     510:	09 f0       	breq	.+2      	; 0x514 <main+0x400>
     512:	60 c0       	rjmp	.+192    	; 0x5d4 <main+0x4c0>
				{
					if((x) % (y) != 0)fl = 1;
     514:	69 8d       	ldd	r22, Y+25	; 0x19
     516:	7a 8d       	ldd	r23, Y+26	; 0x1a
     518:	8b 8d       	ldd	r24, Y+27	; 0x1b
     51a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     51c:	2d 8d       	ldd	r18, Y+29	; 0x1d
     51e:	3e 8d       	ldd	r19, Y+30	; 0x1e
     520:	4f 8d       	ldd	r20, Y+31	; 0x1f
     522:	58 a1       	lds	r21, 0x48
     524:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__divmodsi4>
     528:	dc 01       	movw	r26, r24
     52a:	cb 01       	movw	r24, r22
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	a1 05       	cpc	r26, r1
     530:	b1 05       	cpc	r27, r1
     532:	11 f0       	breq	.+4      	; 0x538 <main+0x424>
     534:	b1 e0       	ldi	r27, 0x01	; 1
     536:	b9 a7       	lds	r27, 0x79
					if(y == 0)
     538:	2d 8d       	ldd	r18, Y+29	; 0x1d
     53a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     53c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     53e:	58 a1       	lds	r21, 0x48
     540:	21 15       	cp	r18, r1
     542:	31 05       	cpc	r19, r1
     544:	41 05       	cpc	r20, r1
     546:	51 05       	cpc	r21, r1
     548:	b9 f4       	brne	.+46     	; 0x578 <main+0x464>
					{
						f2 = 1;
						LCD_clearscreen();
     54a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_clearscreen>
						LCD_vGoTo(1, 3);
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	63 e0       	ldi	r22, 0x03	; 3
     552:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_vGoTo>
						LCD_vSendCMD(0x0c);
     556:	8c e0       	ldi	r24, 0x0C	; 12
     558:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
						LCD_vSend_string("math error");
     55c:	8d e6       	ldi	r24, 0x6D	; 109
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSend_string>
						a = 0;
     564:	26 01       	movw	r4, r12
     566:	37 01       	movw	r6, r14
				else if(op == '/')
				{
					if((x) % (y) != 0)fl = 1;
					if(y == 0)
					{
						f2 = 1;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	a0 e0       	ldi	r26, 0x00	; 0
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	8d a3       	lds	r24, 0x5d
     572:	9e a3       	lds	r25, 0x5e
     574:	af a3       	lds	r26, 0x5f
     576:	b8 a7       	lds	r27, 0x78
						LCD_vGoTo(1, 3);
						LCD_vSendCMD(0x0c);
						LCD_vSend_string("math error");
						a = 0;
					}
					double s = x, i = y;
     578:	69 8d       	ldd	r22, Y+25	; 0x19
     57a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     57c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     57e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     580:	0e 94 57 09 	call	0x12ae	; 0x12ae <__floatsisf>
     584:	6a a7       	lds	r22, 0x7a
     586:	7b a7       	lds	r23, 0x7b
     588:	8c a7       	lds	r24, 0x7c
     58a:	9d a7       	lds	r25, 0x7d
     58c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     58e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     590:	8f 8d       	ldd	r24, Y+31	; 0x1f
     592:	98 a1       	lds	r25, 0x48
     594:	0e 94 57 09 	call	0x12ae	; 0x12ae <__floatsisf>
     598:	9b 01       	movw	r18, r22
     59a:	ac 01       	movw	r20, r24
					d = s / i;
     59c:	6a a5       	lds	r22, 0x6a
     59e:	7b a5       	lds	r23, 0x6b
     5a0:	8c a5       	lds	r24, 0x6c
     5a2:	9d a5       	lds	r25, 0x6d
     5a4:	0e 94 bc 08 	call	0x1178	; 0x1178 <__divsf3>
     5a8:	46 2f       	mov	r20, r22
     5aa:	57 2f       	mov	r21, r23
     5ac:	68 2f       	mov	r22, r24
     5ae:	79 2f       	mov	r23, r25
     5b0:	4e a7       	lds	r20, 0x7e
     5b2:	5f a7       	lds	r21, 0x7f
     5b4:	68 ab       	sts	0x58, r22
     5b6:	79 ab       	sts	0x59, r23
					z = x / y;
     5b8:	69 8d       	ldd	r22, Y+25	; 0x19
     5ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5be:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5c0:	2d 8d       	ldd	r18, Y+29	; 0x1d
     5c2:	3e 8d       	ldd	r19, Y+30	; 0x1e
     5c4:	4f 8d       	ldd	r20, Y+31	; 0x1f
     5c6:	58 a1       	lds	r21, 0x48
     5c8:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__divmodsi4>
     5cc:	2a a7       	lds	r18, 0x7a
     5ce:	3b a7       	lds	r19, 0x7b
     5d0:	4c a7       	lds	r20, 0x7c
     5d2:	5d a7       	lds	r21, 0x7d
				}
				
				if(f2 == 0){
     5d4:	2d a1       	lds	r18, 0x4d
     5d6:	3e a1       	lds	r19, 0x4e
     5d8:	4f a1       	lds	r20, 0x4f
     5da:	58 a5       	lds	r21, 0x68
     5dc:	21 15       	cp	r18, r1
     5de:	31 05       	cpc	r19, r1
     5e0:	41 05       	cpc	r20, r1
     5e2:	51 05       	cpc	r21, r1
     5e4:	d9 f5       	brne	.+118    	; 0x65c <main+0x548>
					LCD_vGoTo(2,2);
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	62 e0       	ldi	r22, 0x02	; 2
     5ea:	0e 94 3f 04 	call	0x87e	; 0x87e <LCD_vGoTo>
					LCD_vSendChar('=');
     5ee:	8d e3       	ldi	r24, 0x3D	; 61
     5f0:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
					if(fl == 1){
     5f4:	39 a5       	lds	r19, 0x69
     5f6:	31 30       	cpi	r19, 0x01	; 1
     5f8:	31 f5       	brne	.+76     	; 0x646 <main+0x532>
						char buf[20];
						if((Neg2 == 1 && Neg1 == 0) || (!Neg2 && Neg1)){
     5fa:	41 e0       	ldi	r20, 0x01	; 1
     5fc:	34 16       	cp	r3, r20
     5fe:	19 f4       	brne	.+6      	; 0x606 <main+0x4f2>
     600:	00 23       	and	r16, r16
     602:	29 f0       	breq	.+10     	; 0x60e <main+0x4fa>
     604:	10 c0       	rjmp	.+32     	; 0x626 <main+0x512>
     606:	33 20       	and	r3, r3
     608:	71 f4       	brne	.+28     	; 0x626 <main+0x512>
     60a:	00 23       	and	r16, r16
     60c:	61 f0       	breq	.+24     	; 0x626 <main+0x512>
							LCD_vSendChar('-');
     60e:	8d e2       	ldi	r24, 0x2D	; 45
     610:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
			                d *= -1;
     614:	8e a5       	lds	r24, 0x6e
     616:	9f a5       	lds	r25, 0x6f
     618:	a8 a9       	sts	0x48, r26
     61a:	b9 a9       	sts	0x49, r27
     61c:	b0 58       	subi	r27, 0x80	; 128
     61e:	8e a7       	lds	r24, 0x7e
     620:	9f a7       	lds	r25, 0x7f
     622:	a8 ab       	sts	0x58, r26
     624:	b9 ab       	sts	0x59, r27
						}
						LCD_sendFloat(d, buf, 3);
     626:	6e a5       	lds	r22, 0x6e
     628:	7f a5       	lds	r23, 0x6f
     62a:	88 a9       	sts	0x48, r24
     62c:	99 a9       	sts	0x49, r25
     62e:	ae 01       	movw	r20, r28
     630:	4f 5f       	subi	r20, 0xFF	; 255
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	23 e0       	ldi	r18, 0x03	; 3
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	0e 94 7f 05 	call	0xafe	; 0xafe <LCD_sendFloat>
						LCD_vSend_string(buf);
     63c:	ce 01       	movw	r24, r28
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	0e 94 5e 04 	call	0x8bc	; 0x8bc <LCD_vSend_string>
     644:	06 c0       	rjmp	.+12     	; 0x652 <main+0x53e>
					}
					else{
					  LCD_vWriteNum(z);
     646:	6a a5       	lds	r22, 0x6a
     648:	7b a5       	lds	r23, 0x6b
     64a:	8c a5       	lds	r24, 0x6c
     64c:	9d a5       	lds	r25, 0x6d
     64e:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_vWriteNum>
					}
					LCD_vSendCMD(0x0c);
     652:	8c e0       	ldi	r24, 0x0C	; 12
     654:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
					a = 0;
     658:	26 01       	movw	r4, r12
     65a:	37 01       	movw	r6, r14
				}
			}
			
		}
	}
	if(c == 'C'){
     65c:	13 34       	cpi	r17, 0x43	; 67
     65e:	09 f0       	breq	.+2      	; 0x662 <main+0x54e>
     660:	87 cd       	rjmp	.-1266   	; 0x170 <main+0x5c>
		a = 1;
		LCD_clearscreen();
     662:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_clearscreen>
		c, op, fl = 0;
		x = 0, y = 0,  f = 0,Neg1= 0, Neg2 = 0, f1 = 0, f2 = 0, f3 = 0, ln = 0;
     666:	10 92 88 00 	sts	0x0088, r1
		LCD_vSendCMD(0x0E);
     66a:	8e e0       	ldi	r24, 0x0E	; 14
     66c:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
			}
			
		}
	}
	if(c == 'C'){
		a = 1;
     670:	44 24       	eor	r4, r4
     672:	55 24       	eor	r5, r5
     674:	32 01       	movw	r6, r4
     676:	43 94       	inc	r4
		LCD_clearscreen();
		c, op, fl = 0;
		x = 0, y = 0,  f = 0,Neg1= 0, Neg2 = 0, f1 = 0, f2 = 0, f3 = 0, ln = 0;
     678:	c9 a2       	lds	r28, 0x99
     67a:	da a2       	lds	r29, 0x9a
     67c:	eb a2       	lds	r30, 0x9b
     67e:	fc a2       	lds	r31, 0x9c
     680:	cd a2       	lds	r28, 0x9d
     682:	de a2       	lds	r29, 0x9e
     684:	ef a2       	lds	r30, 0x9f
     686:	f8 a6       	lds	r31, 0xb8
     688:	cd 8a       	std	Y+21, r12	; 0x15
     68a:	de 8a       	std	Y+22, r13	; 0x16
     68c:	ef 8a       	std	Y+23, r14	; 0x17
     68e:	f8 8e       	std	Y+24, r15	; 0x18
     690:	46 01       	movw	r8, r12
     692:	57 01       	movw	r10, r14
     694:	cd 8e       	std	Y+29, r12	; 0x1d
     696:	de 8e       	std	Y+30, r13	; 0x1e
     698:	ef 8e       	std	Y+31, r14	; 0x1f
     69a:	f8 a2       	lds	r31, 0x98
     69c:	c9 8e       	std	Y+25, r12	; 0x19
     69e:	da 8e       	std	Y+26, r13	; 0x1a
     6a0:	eb 8e       	std	Y+27, r14	; 0x1b
     6a2:	fc 8e       	std	Y+28, r15	; 0x1c
		}
	}
	if(c == 'C'){
		a = 1;
		LCD_clearscreen();
		c, op, fl = 0;
     6a4:	19 a6       	lds	r17, 0xb9
		x = 0, y = 0,  f = 0,Neg1= 0, Neg2 = 0, f1 = 0, f2 = 0, f3 = 0, ln = 0;
     6a6:	33 24       	eor	r3, r3
     6a8:	00 e0       	ldi	r16, 0x00	; 0
     6aa:	62 cd       	rjmp	.-1340   	; 0x170 <main+0x5c>
		if(a == 1){
			if(c == '-' && f == 0){
				Neg1 = 1;
				LCD_vSendChar(c);
			}
			else if(c >= 48 && c <= 57 && f == 0)
     6ac:	80 53       	subi	r24, 0x30	; 48
     6ae:	d0 cd       	rjmp	.-1120   	; 0x250 <main+0x13c>

000006b0 <keypad_vInit>:
{'C','0' ,'=','+'}  //R 3
	//    C0
};
void keypad_vInit()
{
	DIO_voidSetPortDir(KEP_PORT, 0b00001111);
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	6f e0       	ldi	r22, 0x0F	; 15
     6b4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <DIO_voidSetPortDir>
	DIO_voidSetPortVal(KEP_PORT, 0b11111111);
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	6f ef       	ldi	r22, 0xFF	; 255
     6bc:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_voidSetPortVal>
	
}
     6c0:	08 95       	ret

000006c2 <keypad_u8check_press>:
u8 keypad_u8check_press()
{
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	ee 24       	eor	r14, r14
     6d4:	ff 24       	eor	r15, r15
  //char arr[4][4]={{'1','2','3','/'},{'4','5','6','*'},{'7','8','9','-'},{'=','A','B','+'}};  
  u8 ROW,COL,x;
  u8 returnval=255;
     6d6:	df ef       	ldi	r29, 0xFF	; 255
	  DIO_voidSetPinVal(KEP_PORT,1,DIO_PIN_HIGH);
      DIO_voidSetPinVal(KEP_PORT,2,DIO_PIN_HIGH);
	  DIO_voidSetPinVal(KEP_PORT,3,DIO_PIN_HIGH);
      DIO_voidSetPinVal(KEP_PORT,COL,DIO_PIN_LOW);
 
	  for(ROW=ROWNUM;ROW<COLNUM+ROWNUM;ROW++)
     6d8:	cc 24       	eor	r12, r12
     6da:	68 94       	set
     6dc:	c2 f8       	bld	r12, 2
     6de:	de 2c       	mov	r13, r14
  //char arr[4][4]={{'1','2','3','/'},{'4','5','6','*'},{'7','8','9','-'},{'=','A','B','+'}};  
  u8 ROW,COL,x;
  u8 returnval=255;
  for(COL=0;COL<COLNUM;COL++)
  {
	  DIO_voidSetPinVal(KEP_PORT,0,DIO_PIN_HIGH);
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
	  DIO_voidSetPinVal(KEP_PORT,1,DIO_PIN_HIGH);
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	61 e0       	ldi	r22, 0x01	; 1
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
      DIO_voidSetPinVal(KEP_PORT,2,DIO_PIN_HIGH);
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	62 e0       	ldi	r22, 0x02	; 2
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
	  DIO_voidSetPinVal(KEP_PORT,3,DIO_PIN_HIGH);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	63 e0       	ldi	r22, 0x03	; 3
     702:	41 e0       	ldi	r20, 0x01	; 1
     704:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
      DIO_voidSetPinVal(KEP_PORT,COL,DIO_PIN_LOW);
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	6e 2d       	mov	r22, r14
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
{
	DIO_voidSetPortDir(KEP_PORT, 0b00001111);
	DIO_voidSetPortVal(KEP_PORT, 0b11111111);
	
}
u8 keypad_u8check_press()
     712:	87 01       	movw	r16, r14
     714:	08 58       	subi	r16, 0x88	; 136
     716:	1f 4f       	sbci	r17, 0xFF	; 255
	  DIO_voidSetPinVal(KEP_PORT,1,DIO_PIN_HIGH);
      DIO_voidSetPinVal(KEP_PORT,2,DIO_PIN_HIGH);
	  DIO_voidSetPinVal(KEP_PORT,3,DIO_PIN_HIGH);
      DIO_voidSetPinVal(KEP_PORT,COL,DIO_PIN_LOW);
 
	  for(ROW=ROWNUM;ROW<COLNUM+ROWNUM;ROW++)
     718:	cc 2d       	mov	r28, r12
	  {
	  // x=DIO_u8GetPinVal(KEP_PORT,(COL));
	   if(DIO_u8GetPinVal(KEP_PORT,(ROW))==DIO_PIN_LOW)
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	6c 2f       	mov	r22, r28
     71e:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_u8GetPinVal>
     722:	88 23       	and	r24, r24
     724:	11 f4       	brne	.+4      	; 0x72a <keypad_u8check_press+0x68>
		{
		 returnval=KPD[ROW - ROWNUM][COL];
     726:	f8 01       	movw	r30, r16
     728:	d0 81       	ld	r29, Z
		} 
		while(DIO_u8GetPinVal(KEP_PORT,(ROW))==DIO_PIN_LOW);
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	6c 2f       	mov	r22, r28
     72e:	0e 94 50 07 	call	0xea0	; 0xea0 <DIO_u8GetPinVal>
     732:	88 23       	and	r24, r24
     734:	d1 f3       	breq	.-12     	; 0x72a <keypad_u8check_press+0x68>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     736:	8f ec       	ldi	r24, 0xCF	; 207
     738:	97 e0       	ldi	r25, 0x07	; 7
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <keypad_u8check_press+0x78>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <keypad_u8check_press+0x7e>
     740:	00 00       	nop
	  DIO_voidSetPinVal(KEP_PORT,1,DIO_PIN_HIGH);
      DIO_voidSetPinVal(KEP_PORT,2,DIO_PIN_HIGH);
	  DIO_voidSetPinVal(KEP_PORT,3,DIO_PIN_HIGH);
      DIO_voidSetPinVal(KEP_PORT,COL,DIO_PIN_LOW);
 
	  for(ROW=ROWNUM;ROW<COLNUM+ROWNUM;ROW++)
     742:	cf 5f       	subi	r28, 0xFF	; 255
     744:	0c 5f       	subi	r16, 0xFC	; 252
     746:	1f 4f       	sbci	r17, 0xFF	; 255
     748:	c8 30       	cpi	r28, 0x08	; 8
     74a:	39 f7       	brne	.-50     	; 0x71a <keypad_u8check_press+0x58>
		} 
		while(DIO_u8GetPinVal(KEP_PORT,(ROW))==DIO_PIN_LOW);
		_delay_ms(1);
	  } 
  
	  DIO_voidSetPinVal(KEP_PORT,COL,DIO_PIN_HIGH);  
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	6d 2d       	mov	r22, r13
     750:	41 e0       	ldi	r20, 0x01	; 1
     752:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
     756:	08 94       	sec
     758:	e1 1c       	adc	r14, r1
     75a:	f1 1c       	adc	r15, r1
u8 keypad_u8check_press()
{
  //char arr[4][4]={{'1','2','3','/'},{'4','5','6','*'},{'7','8','9','-'},{'=','A','B','+'}};  
  u8 ROW,COL,x;
  u8 returnval=255;
  for(COL=0;COL<COLNUM;COL++)
     75c:	94 e0       	ldi	r25, 0x04	; 4
     75e:	e9 16       	cp	r14, r25
     760:	f1 04       	cpc	r15, r1
     762:	09 f0       	breq	.+2      	; 0x766 <keypad_u8check_press+0xa4>
     764:	bc cf       	rjmp	.-136    	; 0x6de <keypad_u8check_press+0x1c>
	  DIO_voidSetPinVal(KEP_PORT,COL,DIO_PIN_HIGH);  
  
 }  
  
  return returnval ;  
 }
     766:	8d 2f       	mov	r24, r29
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	df 90       	pop	r13
     776:	cf 90       	pop	r12
     778:	08 95       	ret

0000077a <LCD_vSendCMD>:
	LCD_vSendCMD(LCD_CLR);
	_delay_ms(1.54);
	LCD_vSendCMD(LCD_ENTRY_MODE);
	_delay_ms(2);
}
void LCD_vSendCMD(u8 CMD){
     77a:	cf 93       	push	r28
     77c:	c8 2f       	mov	r28, r24
	DIO_voidSetPinVal(LCD_RW,DIO_PIN_LOW);
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	61 e0       	ldi	r22, 0x01	; 1
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
	DIO_voidSetPinVal(LCD_RS,DIO_PIN_LOW);
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	40 e0       	ldi	r20, 0x00	; 0
     78e:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
	DIO_voidSetPortVal(LCD_PORT, CMD);
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	6c 2f       	mov	r22, r28
     796:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_voidSetPortVal>
	
	DIO_voidSetPinVal(LCD_EN, DIO_PIN_HIGH);
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	62 e0       	ldi	r22, 0x02	; 2
     79e:	41 e0       	ldi	r20, 0x01	; 1
     7a0:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
	DIO_voidSetPinVal(LCD_EN, DIO_PIN_LOW);
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	62 e0       	ldi	r22, 0x02	; 2
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
     7ae:	81 ee       	ldi	r24, 0xE1	; 225
     7b0:	94 e0       	ldi	r25, 0x04	; 4
     7b2:	01 97       	sbiw	r24, 0x01	; 1
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <LCD_vSendCMD+0x38>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <LCD_vSendCMD+0x3e>
     7b8:	00 00       	nop
	_delay_ms(5);
}         
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <LCD_vInit>:

#include "LCD_int.h"

void LCD_vInit(void){
	
	DIO_voidSetPortDir(LCD_PORT, DIO_PORT_OUTPUT);
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	6f ef       	ldi	r22, 0xFF	; 255
     7c2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <DIO_voidSetPortDir>
	DIO_voidSetPinDir(LCD_EN,DIO_PIN_OUTPUT);
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	62 e0       	ldi	r22, 0x02	; 2
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <DIO_voidSetPinDir>
	DIO_voidSetPinDir(LCD_RW,DIO_PIN_OUTPUT);
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	41 e0       	ldi	r20, 0x01	; 1
     7d6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <DIO_voidSetPinDir>
	DIO_voidSetPinDir(LCD_RS,DIO_PIN_OUTPUT);
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	60 e0       	ldi	r22, 0x00	; 0
     7de:	41 e0       	ldi	r20, 0x01	; 1
     7e0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <DIO_voidSetPinDir>
     7e4:	85 e4       	ldi	r24, 0x45	; 69
     7e6:	9e e1       	ldi	r25, 0x1E	; 30
     7e8:	01 97       	sbiw	r24, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <LCD_vInit+0x2a>
     7ec:	00 c0       	rjmp	.+0      	; 0x7ee <LCD_vInit+0x30>
     7ee:	00 00       	nop
	
	_delay_ms(31);
	LCD_vSendCMD(LCD_FUNSET_8BIT);
     7f0:	88 e3       	ldi	r24, 0x38	; 56
     7f2:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
     7f6:	8f e0       	ldi	r24, 0x0F	; 15
     7f8:	97 e2       	ldi	r25, 0x27	; 39
     7fa:	01 97       	sbiw	r24, 0x01	; 1
     7fc:	f1 f7       	brne	.-4      	; 0x7fa <LCD_vInit+0x3c>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <LCD_vInit+0x42>
     800:	00 00       	nop
	_delay_ms(40);
	LCD_vSendCMD(LCD_DISPON_CURON);
     802:	8c e0       	ldi	r24, 0x0C	; 12
     804:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
     808:	8f e0       	ldi	r24, 0x0F	; 15
     80a:	97 e2       	ldi	r25, 0x27	; 39
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <LCD_vInit+0x4e>
     810:	00 c0       	rjmp	.+0      	; 0x812 <LCD_vInit+0x54>
     812:	00 00       	nop
	_delay_ms(40);
	LCD_vSendCMD(LCD_CLR);
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
     81a:	80 e8       	ldi	r24, 0x80	; 128
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	f1 f7       	brne	.-4      	; 0x81e <LCD_vInit+0x60>
     822:	00 c0       	rjmp	.+0      	; 0x824 <LCD_vInit+0x66>
     824:	00 00       	nop
	_delay_ms(1.54);
	LCD_vSendCMD(LCD_ENTRY_MODE);
     826:	86 e0       	ldi	r24, 0x06	; 6
     828:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
     82c:	83 ef       	ldi	r24, 0xF3	; 243
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	f1 f7       	brne	.-4      	; 0x830 <LCD_vInit+0x72>
     834:	00 c0       	rjmp	.+0      	; 0x836 <LCD_vInit+0x78>
     836:	00 00       	nop
	_delay_ms(2);
}
     838:	08 95       	ret

0000083a <LCD_vSendChar>:
	
	DIO_voidSetPinVal(LCD_EN, DIO_PIN_HIGH);
	DIO_voidSetPinVal(LCD_EN, DIO_PIN_LOW);
	_delay_ms(5);
}         
void LCD_vSendChar(u8 Char){
     83a:	cf 93       	push	r28
     83c:	c8 2f       	mov	r28, r24
	DIO_voidSetPinVal(LCD_RW,DIO_PIN_LOW);
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
	DIO_voidSetPinVal(LCD_RS,DIO_PIN_HIGH);
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
	DIO_voidSetPortVal(LCD_PORT, Char);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	6c 2f       	mov	r22, r28
     856:	0e 94 c1 07 	call	0xf82	; 0xf82 <DIO_voidSetPortVal>
	
	DIO_voidSetPinVal(LCD_EN, DIO_PIN_HIGH);
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	62 e0       	ldi	r22, 0x02	; 2
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
	DIO_voidSetPinVal(LCD_EN, DIO_PIN_LOW);
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	62 e0       	ldi	r22, 0x02	; 2
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	0e 94 85 06 	call	0xd0a	; 0xd0a <DIO_voidSetPinVal>
     86e:	81 ee       	ldi	r24, 0xE1	; 225
     870:	94 e0       	ldi	r25, 0x04	; 4
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <__stack+0x13>
     876:	00 c0       	rjmp	.+0      	; 0x878 <__stack+0x19>
     878:	00 00       	nop
	_delay_ms(5);
}
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <LCD_vGoTo>:

void LCD_vGoTo(u8 x, u8 y)
{
	if(x <= 16 && y <= 2 && x != 0 && y != 0){
     87e:	81 31       	cpi	r24, 0x11	; 17
     880:	90 f4       	brcc	.+36     	; 0x8a6 <LCD_vGoTo+0x28>
     882:	63 30       	cpi	r22, 0x03	; 3
     884:	80 f4       	brcc	.+32     	; 0x8a6 <LCD_vGoTo+0x28>
     886:	88 23       	and	r24, r24
     888:	71 f0       	breq	.+28     	; 0x8a6 <LCD_vGoTo+0x28>
     88a:	66 23       	and	r22, r22
     88c:	61 f0       	breq	.+24     	; 0x8a6 <LCD_vGoTo+0x28>
		switch(y)
     88e:	61 30       	cpi	r22, 0x01	; 1
     890:	19 f0       	breq	.+6      	; 0x898 <LCD_vGoTo+0x1a>
     892:	62 30       	cpi	r22, 0x02	; 2
     894:	41 f4       	brne	.+16     	; 0x8a6 <LCD_vGoTo+0x28>
     896:	04 c0       	rjmp	.+8      	; 0x8a0 <LCD_vGoTo+0x22>
		{
			case 1 : LCD_vSendCMD(127 + x);break;
     898:	81 58       	subi	r24, 0x81	; 129
     89a:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
     89e:	08 95       	ret
			case 2 : LCD_vSendCMD(191 + x);break;
     8a0:	81 54       	subi	r24, 0x41	; 65
     8a2:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
     8a6:	08 95       	ret

000008a8 <LCD_clearscreen>:
		}
	}
}
void LCD_clearscreen()
{
	LCD_vSendCMD(LCD_CLR);
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
     8ae:	83 ef       	ldi	r24, 0xF3	; 243
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	f1 f7       	brne	.-4      	; 0x8b2 <LCD_clearscreen+0xa>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <LCD_clearscreen+0x10>
     8b8:	00 00       	nop
	_delay_ms(2);
}
     8ba:	08 95       	ret

000008bc <LCD_vSend_string>:
void LCD_vSend_string(u8 *data){
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	ec 01       	movw	r28, r24
	while((*data) != '\0')
     8c2:	88 81       	ld	r24, Y
     8c4:	88 23       	and	r24, r24
     8c6:	31 f0       	breq	.+12     	; 0x8d4 <LCD_vSend_string+0x18>
void LCD_clearscreen()
{
	LCD_vSendCMD(LCD_CLR);
	_delay_ms(2);
}
void LCD_vSend_string(u8 *data){
     8c8:	21 96       	adiw	r28, 0x01	; 1
	while((*data) != '\0')
	{
		LCD_vSendChar(*data);
     8ca:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
{
	LCD_vSendCMD(LCD_CLR);
	_delay_ms(2);
}
void LCD_vSend_string(u8 *data){
	while((*data) != '\0')
     8ce:	89 91       	ld	r24, Y+
     8d0:	88 23       	and	r24, r24
     8d2:	d9 f7       	brne	.-10     	; 0x8ca <LCD_vSend_string+0xe>
	{
		LCD_vSendChar(*data);
		data++;
		
	}
}
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <LCD_vWriteNum>:
void LCD_vWriteNum(s32 NUM){
     8da:	4f 92       	push	r4
     8dc:	5f 92       	push	r5
     8de:	6f 92       	push	r6
     8e0:	7f 92       	push	r7
     8e2:	8f 92       	push	r8
     8e4:	9f 92       	push	r9
     8e6:	af 92       	push	r10
     8e8:	bf 92       	push	r11
     8ea:	cf 92       	push	r12
     8ec:	df 92       	push	r13
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	6b 01       	movw	r12, r22
     8f8:	7c 01       	movw	r14, r24
	if(NUM == 0){
     8fa:	61 15       	cp	r22, r1
     8fc:	71 05       	cpc	r23, r1
     8fe:	81 05       	cpc	r24, r1
     900:	91 05       	cpc	r25, r1
     902:	21 f4       	brne	.+8      	; 0x90c <LCD_vWriteNum+0x32>
		LCD_vSendChar('0');
     904:	80 e3       	ldi	r24, 0x30	; 48
     906:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
     90a:	62 c0       	rjmp	.+196    	; 0x9d0 <LCD_vWriteNum+0xf6>
	}
	if(NUM < 0){
     90c:	99 23       	and	r25, r25
     90e:	5c f4       	brge	.+22     	; 0x926 <LCD_vWriteNum+0x4c>
		LCD_vSendChar('-');
     910:	8d e2       	ldi	r24, 0x2D	; 45
     912:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
		NUM *= -1;
     916:	f0 94       	com	r15
     918:	e0 94       	com	r14
     91a:	d0 94       	com	r13
     91c:	c0 94       	com	r12
     91e:	c1 1c       	adc	r12, r1
     920:	d1 1c       	adc	r13, r1
     922:	e1 1c       	adc	r14, r1
     924:	f1 1c       	adc	r15, r1
	}
	s32 temp = 1;
	while(NUM > 0){
     926:	1c 14       	cp	r1, r12
     928:	1d 04       	cpc	r1, r13
     92a:	1e 04       	cpc	r1, r14
     92c:	1f 04       	cpc	r1, r15
     92e:	0c f0       	brlt	.+2      	; 0x932 <LCD_vWriteNum+0x58>
     930:	4f c0       	rjmp	.+158    	; 0x9d0 <LCD_vWriteNum+0xf6>
	}
	if(NUM < 0){
		LCD_vSendChar('-');
		NUM *= -1;
	}
	s32 temp = 1;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e0       	ldi	r26, 0x00	; 0
     938:	b0 e0       	ldi	r27, 0x00	; 0
	while(NUM > 0){
		temp = (temp * 10) + (NUM % 10);
     93a:	0f 2e       	mov	r0, r31
     93c:	fa e0       	ldi	r31, 0x0A	; 10
     93e:	8f 2e       	mov	r8, r31
     940:	f0 e0       	ldi	r31, 0x00	; 0
     942:	9f 2e       	mov	r9, r31
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	af 2e       	mov	r10, r31
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	bf 2e       	mov	r11, r31
     94c:	f0 2d       	mov	r31, r0
     94e:	bc 01       	movw	r22, r24
     950:	cd 01       	movw	r24, r26
     952:	a5 01       	movw	r20, r10
     954:	94 01       	movw	r18, r8
     956:	0e 94 ab 0b 	call	0x1756	; 0x1756 <__mulsi3>
     95a:	2b 01       	movw	r4, r22
     95c:	3c 01       	movw	r6, r24
     95e:	c7 01       	movw	r24, r14
     960:	b6 01       	movw	r22, r12
     962:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__divmodsi4>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	84 0d       	add	r24, r4
     96c:	95 1d       	adc	r25, r5
     96e:	a6 1d       	adc	r26, r6
     970:	b7 1d       	adc	r27, r7
		NUM /= 10;
     972:	c2 2e       	mov	r12, r18
     974:	d3 2e       	mov	r13, r19
     976:	e4 2e       	mov	r14, r20
     978:	f5 2e       	mov	r15, r21
	if(NUM < 0){
		LCD_vSendChar('-');
		NUM *= -1;
	}
	s32 temp = 1;
	while(NUM > 0){
     97a:	1c 14       	cp	r1, r12
     97c:	1d 04       	cpc	r1, r13
     97e:	1e 04       	cpc	r1, r14
     980:	1f 04       	cpc	r1, r15
     982:	2c f3       	brlt	.-54     	; 0x94e <LCD_vWriteNum+0x74>
		temp = (temp * 10) + (NUM % 10);
		NUM /= 10;
	}
	while(temp != 1){
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	91 05       	cpc	r25, r1
     988:	a1 05       	cpc	r26, r1
     98a:	b1 05       	cpc	r27, r1
     98c:	09 f1       	breq	.+66     	; 0x9d0 <LCD_vWriteNum+0xf6>
		LCD_vSendChar((temp % 10) + '0');
     98e:	0f 2e       	mov	r0, r31
     990:	fa e0       	ldi	r31, 0x0A	; 10
     992:	4f 2e       	mov	r4, r31
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	5f 2e       	mov	r5, r31
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	6f 2e       	mov	r6, r31
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	7f 2e       	mov	r7, r31
     9a0:	f0 2d       	mov	r31, r0
     9a2:	bc 01       	movw	r22, r24
     9a4:	cd 01       	movw	r24, r26
     9a6:	a3 01       	movw	r20, r6
     9a8:	92 01       	movw	r18, r4
     9aa:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__divmodsi4>
     9ae:	82 2e       	mov	r8, r18
     9b0:	c3 2e       	mov	r12, r19
     9b2:	c4 2f       	mov	r28, r20
     9b4:	d5 2f       	mov	r29, r21
     9b6:	86 2f       	mov	r24, r22
     9b8:	80 5d       	subi	r24, 0xD0	; 208
     9ba:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
		temp /= 10;
     9be:	88 2d       	mov	r24, r8
     9c0:	9c 2d       	mov	r25, r12
     9c2:	ac 2f       	mov	r26, r28
     9c4:	bd 2f       	mov	r27, r29
	s32 temp = 1;
	while(NUM > 0){
		temp = (temp * 10) + (NUM % 10);
		NUM /= 10;
	}
	while(temp != 1){
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	91 05       	cpc	r25, r1
     9ca:	a1 05       	cpc	r26, r1
     9cc:	b1 05       	cpc	r27, r1
     9ce:	49 f7       	brne	.-46     	; 0x9a2 <LCD_vWriteNum+0xc8>
		LCD_vSendChar((temp % 10) + '0');
		temp /= 10;
	}
}
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	bf 90       	pop	r11
     9de:	af 90       	pop	r10
     9e0:	9f 90       	pop	r9
     9e2:	8f 90       	pop	r8
     9e4:	7f 90       	pop	r7
     9e6:	6f 90       	pop	r6
     9e8:	5f 90       	pop	r5
     9ea:	4f 90       	pop	r4
     9ec:	08 95       	ret

000009ee <LCD_vSaveCustomChar>:
void LCD_vSaveCustomChar(u8 CGRAMIndex, u8 CustomChar[]){
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	06 2f       	mov	r16, r22
     9f8:	17 2f       	mov	r17, r23
	LCD_vSendCMD(LCD_CGRAM_ADDRESS+(CGRAMIndex * 8));
     9fa:	88 0f       	add	r24, r24
     9fc:	88 0f       	add	r24, r24
     9fe:	88 0f       	add	r24, r24
     a00:	80 5c       	subi	r24, 0xC0	; 192
     a02:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
     a06:	c0 2f       	mov	r28, r16
     a08:	d1 2f       	mov	r29, r17
	for(u8 i = 0; i < 8; i++){
     a0a:	10 e0       	ldi	r17, 0x00	; 0
		LCD_vSendChar(CustomChar[i]);
     a0c:	89 91       	ld	r24, Y+
     a0e:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
		temp /= 10;
	}
}
void LCD_vSaveCustomChar(u8 CGRAMIndex, u8 CustomChar[]){
	LCD_vSendCMD(LCD_CGRAM_ADDRESS+(CGRAMIndex * 8));
	for(u8 i = 0; i < 8; i++){
     a12:	1f 5f       	subi	r17, 0xFF	; 255
     a14:	18 30       	cpi	r17, 0x08	; 8
     a16:	d1 f7       	brne	.-12     	; 0xa0c <LCD_vSaveCustomChar+0x1e>
		LCD_vSendChar(CustomChar[i]);
	}
	LCD_vSendCMD(LCD_DDRAM_SETCURS);
     a18:	80 e8       	ldi	r24, 0x80	; 128
     a1a:	0e 94 bd 03 	call	0x77a	; 0x77a <LCD_vSendCMD>
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <LCD_vWriteCustomChar>:
void LCD_vWriteCustomChar(u8 CGRAMIndex){
	if(CGRAMIndex){
     a28:	88 23       	and	r24, r24
     a2a:	11 f0       	breq	.+4      	; 0xa30 <LCD_vWriteCustomChar+0x8>
		LCD_vSendChar(CGRAMIndex);
     a2c:	0e 94 1d 04 	call	0x83a	; 0x83a <LCD_vSendChar>
     a30:	08 95       	ret

00000a32 <reverse>:
	return i;
}

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     a32:	9b 01       	movw	r18, r22
     a34:	21 50       	subi	r18, 0x01	; 1
     a36:	30 40       	sbci	r19, 0x00	; 0
	while (i < j) {
     a38:	12 16       	cp	r1, r18
     a3a:	13 06       	cpc	r1, r19
     a3c:	84 f4       	brge	.+32     	; 0xa5e <reverse+0x2c>
	reverse(str, i);
	str[i] = '\0';
	return i;
}

void reverse(char* str, int len)
     a3e:	dc 01       	movw	r26, r24
     a40:	a6 0f       	add	r26, r22
     a42:	b7 1f       	adc	r27, r23
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
     a44:	fc 01       	movw	r30, r24
	return i;
}

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
	while (i < j) {
		temp = str[i];
     a4a:	40 81       	ld	r20, Z
		str[i] = str[j];
     a4c:	5e 91       	ld	r21, -X
     a4e:	51 93       	st	Z+, r21
		str[j] = temp;
     a50:	4c 93       	st	X, r20
		i++;
     a52:	01 96       	adiw	r24, 0x01	; 1
		j--;
     a54:	21 50       	subi	r18, 0x01	; 1
     a56:	30 40       	sbci	r19, 0x00	; 0
}

void reverse(char* str, int len)
{
	int i = 0, j = len - 1, temp;
	while (i < j) {
     a58:	82 17       	cp	r24, r18
     a5a:	93 07       	cpc	r25, r19
     a5c:	b4 f3       	brlt	.-20     	; 0xa4a <reverse+0x18>
     a5e:	08 95       	ret

00000a60 <intToStr>:
	if(CGRAMIndex){
		LCD_vSendChar(CGRAMIndex);
	}
}
int intToStr(int x, char str[], int d)
{
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	7b 01       	movw	r14, r22
     a6e:	8a 01       	movw	r16, r20
	int i = 0;
	while (x) {
     a70:	00 97       	sbiw	r24, 0x00	; 0
     a72:	81 f0       	breq	.+32     	; 0xa94 <intToStr+0x34>
     a74:	fb 01       	movw	r30, r22
		LCD_vSendChar(CGRAMIndex);
	}
}
int intToStr(int x, char str[], int d)
{
	int i = 0;
     a76:	c0 e0       	ldi	r28, 0x00	; 0
     a78:	d0 e0       	ldi	r29, 0x00	; 0
	while (x) {
		str[i++] = (x % 10) + '0';
     a7a:	2a e0       	ldi	r18, 0x0A	; 10
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	b9 01       	movw	r22, r18
     a80:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__divmodhi4>
     a84:	80 5d       	subi	r24, 0xD0	; 208
     a86:	81 93       	st	Z+, r24
     a88:	21 96       	adiw	r28, 0x01	; 1
		x = x / 10;
     a8a:	86 2f       	mov	r24, r22
     a8c:	97 2f       	mov	r25, r23
	}
}
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x) {
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	b1 f7       	brne	.-20     	; 0xa7e <intToStr+0x1e>
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <intToStr+0x38>
		LCD_vSendChar(CGRAMIndex);
	}
}
int intToStr(int x, char str[], int d)
{
	int i = 0;
     a94:	c0 e0       	ldi	r28, 0x00	; 0
     a96:	d0 e0       	ldi	r29, 0x00	; 0
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     a98:	c0 17       	cp	r28, r16
     a9a:	d1 07       	cpc	r29, r17
     a9c:	94 f4       	brge	.+36     	; 0xac2 <intToStr+0x62>
void LCD_vWriteCustomChar(u8 CGRAMIndex){
	if(CGRAMIndex){
		LCD_vSendChar(CGRAMIndex);
	}
}
int intToStr(int x, char str[], int d)
     a9e:	f7 01       	movw	r30, r14
     aa0:	ec 0f       	add	r30, r28
     aa2:	fd 1f       	adc	r31, r29
     aa4:	ce 01       	movw	r24, r28
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
     aa6:	20 e3       	ldi	r18, 0x30	; 48
     aa8:	21 93       	st	Z+, r18
     aaa:	01 96       	adiw	r24, 0x01	; 1
		x = x / 10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     aac:	80 17       	cp	r24, r16
     aae:	91 07       	cpc	r25, r17
     ab0:	dc f3       	brlt	.-10     	; 0xaa8 <intToStr+0x48>
void LCD_vWriteCustomChar(u8 CGRAMIndex){
	if(CGRAMIndex){
		LCD_vSendChar(CGRAMIndex);
	}
}
int intToStr(int x, char str[], int d)
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	c0 95       	com	r28
     ab8:	d0 95       	com	r29
     aba:	c0 0f       	add	r28, r16
     abc:	d1 1f       	adc	r29, r17
     abe:	c8 0f       	add	r28, r24
     ac0:	d9 1f       	adc	r29, r25
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
	str[i++] = '0';
	
	reverse(str, i);
     ac2:	c7 01       	movw	r24, r14
     ac4:	be 01       	movw	r22, r28
     ac6:	0e 94 19 05 	call	0xa32	; 0xa32 <reverse>
	str[i] = '\0';
     aca:	f7 01       	movw	r30, r14
     acc:	ec 0f       	add	r30, r28
     ace:	fd 1f       	adc	r31, r29
     ad0:	10 82       	st	Z, r1
	return i;
}
     ad2:	8c 2f       	mov	r24, r28
     ad4:	9d 2f       	mov	r25, r29
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	ef 90       	pop	r14
     ae2:	08 95       	ret

00000ae4 <Clear_buffer>:
		i++;
		j--;
	}
}

void Clear_buffer(char *res){
     ae4:	fc 01       	movw	r30, r24
	int i = 0;
	while(res[i] != '\0'){
     ae6:	80 81       	ld	r24, Z
     ae8:	88 23       	and	r24, r24
     aea:	41 f0       	breq	.+16     	; 0xafc <Clear_buffer+0x18>
		i++;
		j--;
	}
}

void Clear_buffer(char *res){
     aec:	cf 01       	movw	r24, r30
     aee:	01 96       	adiw	r24, 0x01	; 1
	int i = 0;
	while(res[i] != '\0'){
		res[i] = '\0';
     af0:	10 82       	st	Z, r1
	}
}

void Clear_buffer(char *res){
	int i = 0;
	while(res[i] != '\0'){
     af2:	fc 01       	movw	r30, r24
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	20 81       	ld	r18, Z
     af8:	22 23       	and	r18, r18
     afa:	d1 f7       	brne	.-12     	; 0xaf0 <Clear_buffer+0xc>
     afc:	08 95       	ret

00000afe <LCD_sendFloat>:
		i++;
	}
}

void LCD_sendFloat(float n, char* res, int afterpoint)
{
     afe:	4f 92       	push	r4
     b00:	5f 92       	push	r5
     b02:	6f 92       	push	r6
     b04:	7f 92       	push	r7
     b06:	8f 92       	push	r8
     b08:	9f 92       	push	r9
     b0a:	af 92       	push	r10
     b0c:	bf 92       	push	r11
     b0e:	cf 92       	push	r12
     b10:	df 92       	push	r13
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	6b 01       	movw	r12, r22
     b20:	7c 01       	movw	r14, r24
     b22:	ea 01       	movw	r28, r20
     b24:	59 01       	movw	r10, r18
	Clear_buffer(res);
     b26:	ca 01       	movw	r24, r20
     b28:	0e 94 72 05 	call	0xae4	; 0xae4 <Clear_buffer>
	// Extract integer part
	int ipart = (int)n;
     b2c:	c7 01       	movw	r24, r14
     b2e:	b6 01       	movw	r22, r12
     b30:	0e 94 24 09 	call	0x1248	; 0x1248 <__fixsfsi>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	8c 01       	movw	r16, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
     b3a:	be 01       	movw	r22, r28
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	50 e0       	ldi	r21, 0x00	; 0
     b40:	0e 94 30 05 	call	0xa60	; 0xa60 <intToStr>
	
	// check for display option after point
	if (afterpoint != 0) {
     b44:	a1 14       	cp	r10, r1
     b46:	b1 04       	cpc	r11, r1
     b48:	09 f4       	brne	.+2      	; 0xb4c <LCD_sendFloat+0x4e>
     b4a:	46 c0       	rjmp	.+140    	; 0xbd8 <LCD_sendFloat+0xda>
		res[i] = '.';
     b4c:	48 2e       	mov	r4, r24
     b4e:	59 2e       	mov	r5, r25
     b50:	fe 01       	movw	r30, r28
     b52:	e4 0d       	add	r30, r4
     b54:	f5 1d       	adc	r31, r5
     b56:	8e e2       	ldi	r24, 0x2E	; 46
     b58:	80 83       	st	Z, r24
		fpart = fpart * pow(10, afterpoint);
     b5a:	b5 01       	movw	r22, r10
     b5c:	88 27       	eor	r24, r24
     b5e:	77 fd       	sbrc	r23, 7
     b60:	80 95       	com	r24
     b62:	98 2f       	mov	r25, r24
     b64:	0e 94 57 09 	call	0x12ae	; 0x12ae <__floatsisf>
     b68:	9b 01       	movw	r18, r22
     b6a:	ac 01       	movw	r20, r24
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	80 e2       	ldi	r24, 0x20	; 32
     b72:	91 e4       	ldi	r25, 0x41	; 65
     b74:	0e 94 46 0a 	call	0x148c	; 0x148c <pow>
     b78:	96 2e       	mov	r9, r22
     b7a:	87 2e       	mov	r8, r23
     b7c:	78 2e       	mov	r7, r24
     b7e:	69 2e       	mov	r6, r25
	Clear_buffer(res);
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
     b80:	b8 01       	movw	r22, r16
     b82:	88 27       	eor	r24, r24
     b84:	77 fd       	sbrc	r23, 7
     b86:	80 95       	com	r24
     b88:	98 2f       	mov	r25, r24
     b8a:	0e 94 57 09 	call	0x12ae	; 0x12ae <__floatsisf>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	c7 01       	movw	r24, r14
     b94:	b6 01       	movw	r22, r12
     b96:	0e 94 57 08 	call	0x10ae	; 0x10ae <__subsf3>
     b9a:	f6 2f       	mov	r31, r22
     b9c:	e7 2f       	mov	r30, r23
     b9e:	38 2f       	mov	r19, r24
     ba0:	29 2f       	mov	r18, r25
	int i = intToStr(ipart, res, 0);
	
	// check for display option after point
	if (afterpoint != 0) {
		res[i] = '.';
		fpart = fpart * pow(10, afterpoint);
     ba2:	49 2d       	mov	r20, r9
     ba4:	58 2d       	mov	r21, r8
     ba6:	67 2d       	mov	r22, r7
     ba8:	76 2d       	mov	r23, r6
     baa:	cb 01       	movw	r24, r22
     bac:	ba 01       	movw	r22, r20
     bae:	42 2f       	mov	r20, r18
     bb0:	0f 2f       	mov	r16, r31
     bb2:	1e 2f       	mov	r17, r30
     bb4:	23 2f       	mov	r18, r19
     bb6:	34 2f       	mov	r19, r20
     bb8:	a9 01       	movw	r20, r18
     bba:	98 01       	movw	r18, r16
     bbc:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__mulsf3>
		
		intToStr((int)fpart, res + i + 1, afterpoint);
     bc0:	0e 94 24 09 	call	0x1248	; 0x1248 <__fixsfsi>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	b2 01       	movw	r22, r4
     bca:	6f 5f       	subi	r22, 0xFF	; 255
     bcc:	7f 4f       	sbci	r23, 0xFF	; 255
     bce:	6c 0f       	add	r22, r28
     bd0:	7d 1f       	adc	r23, r29
     bd2:	a5 01       	movw	r20, r10
     bd4:	0e 94 30 05 	call	0xa60	; 0xa60 <intToStr>
	}
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	bf 90       	pop	r11
     bea:	af 90       	pop	r10
     bec:	9f 90       	pop	r9
     bee:	8f 90       	pop	r8
     bf0:	7f 90       	pop	r7
     bf2:	6f 90       	pop	r6
     bf4:	5f 90       	pop	r5
     bf6:	4f 90       	pop	r4
     bf8:	08 95       	ret

00000bfa <DIO_voidSetPinDir>:



void DIO_voidSetPinDir(u8 u8PortId, u8 u8PinId, u8 u8PinDir)
{
		if (u8PortId <=  DIO_PORTD && u8PinId <= DIO_PIN7 )
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	08 f0       	brcs	.+2      	; 0xc00 <DIO_voidSetPinDir+0x6>
     bfe:	84 c0       	rjmp	.+264    	; 0xd08 <DIO_voidSetPinDir+0x10e>
     c00:	68 30       	cpi	r22, 0x08	; 8
     c02:	08 f0       	brcs	.+2      	; 0xc06 <DIO_voidSetPinDir+0xc>
     c04:	81 c0       	rjmp	.+258    	; 0xd08 <DIO_voidSetPinDir+0x10e>
		{

			if (u8PinDir == DIO_PIN_INPUT)
     c06:	44 23       	and	r20, r20
     c08:	09 f0       	breq	.+2      	; 0xc0c <DIO_voidSetPinDir+0x12>
     c0a:	42 c0       	rjmp	.+132    	; 0xc90 <DIO_voidSetPinDir+0x96>
				{
					switch(u8PortId)
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	b1 f0       	breq	.+44     	; 0xc3c <DIO_voidSetPinDir+0x42>
     c10:	81 30       	cpi	r24, 0x01	; 1
     c12:	30 f0       	brcs	.+12     	; 0xc20 <DIO_voidSetPinDir+0x26>
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	01 f1       	breq	.+64     	; 0xc58 <DIO_voidSetPinDir+0x5e>
     c18:	83 30       	cpi	r24, 0x03	; 3
     c1a:	09 f0       	breq	.+2      	; 0xc1e <DIO_voidSetPinDir+0x24>
     c1c:	75 c0       	rjmp	.+234    	; 0xd08 <DIO_voidSetPinDir+0x10e>
     c1e:	2a c0       	rjmp	.+84     	; 0xc74 <DIO_voidSetPinDir+0x7a>
					{
						case DIO_PORTA: CLR_BIT(DDRA,u8PinId); break;
     c20:	2a b3       	in	r18, 0x1a	; 26
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	ac 01       	movw	r20, r24
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <DIO_voidSetPinDir+0x34>
     c2a:	44 0f       	add	r20, r20
     c2c:	55 1f       	adc	r21, r21
     c2e:	6a 95       	dec	r22
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <DIO_voidSetPinDir+0x30>
     c32:	ba 01       	movw	r22, r20
     c34:	60 95       	com	r22
     c36:	62 23       	and	r22, r18
     c38:	6a bb       	out	0x1a, r22	; 26
     c3a:	08 95       	ret
						case DIO_PORTB: CLR_BIT(DDRB,u8PinId); break;
     c3c:	27 b3       	in	r18, 0x17	; 23
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	ac 01       	movw	r20, r24
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <DIO_voidSetPinDir+0x50>
     c46:	44 0f       	add	r20, r20
     c48:	55 1f       	adc	r21, r21
     c4a:	6a 95       	dec	r22
     c4c:	e2 f7       	brpl	.-8      	; 0xc46 <DIO_voidSetPinDir+0x4c>
     c4e:	ba 01       	movw	r22, r20
     c50:	60 95       	com	r22
     c52:	62 23       	and	r22, r18
     c54:	67 bb       	out	0x17, r22	; 23
     c56:	08 95       	ret
						case DIO_PORTC: CLR_BIT(DDRC,u8PinId); break;
     c58:	24 b3       	in	r18, 0x14	; 20
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	ac 01       	movw	r20, r24
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <DIO_voidSetPinDir+0x6c>
     c62:	44 0f       	add	r20, r20
     c64:	55 1f       	adc	r21, r21
     c66:	6a 95       	dec	r22
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <DIO_voidSetPinDir+0x68>
     c6a:	ba 01       	movw	r22, r20
     c6c:	60 95       	com	r22
     c6e:	62 23       	and	r22, r18
     c70:	64 bb       	out	0x14, r22	; 20
     c72:	08 95       	ret
						case DIO_PORTD: CLR_BIT(DDRD,u8PinId); break;
     c74:	21 b3       	in	r18, 0x11	; 17
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	ac 01       	movw	r20, r24
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_voidSetPinDir+0x88>
     c7e:	44 0f       	add	r20, r20
     c80:	55 1f       	adc	r21, r21
     c82:	6a 95       	dec	r22
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_voidSetPinDir+0x84>
     c86:	ba 01       	movw	r22, r20
     c88:	60 95       	com	r22
     c8a:	62 23       	and	r22, r18
     c8c:	61 bb       	out	0x11, r22	; 17
     c8e:	08 95       	ret
					}
				}
				else if (u8PinDir == DIO_PIN_OUTPUT)
     c90:	41 30       	cpi	r20, 0x01	; 1
     c92:	d1 f5       	brne	.+116    	; 0xd08 <DIO_voidSetPinDir+0x10e>
				{
					switch(u8PortId)
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	a1 f0       	breq	.+40     	; 0xcc0 <DIO_voidSetPinDir+0xc6>
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	28 f0       	brcs	.+10     	; 0xca6 <DIO_voidSetPinDir+0xac>
     c9c:	82 30       	cpi	r24, 0x02	; 2
     c9e:	e9 f0       	breq	.+58     	; 0xcda <DIO_voidSetPinDir+0xe0>
     ca0:	83 30       	cpi	r24, 0x03	; 3
     ca2:	91 f5       	brne	.+100    	; 0xd08 <DIO_voidSetPinDir+0x10e>
     ca4:	26 c0       	rjmp	.+76     	; 0xcf2 <DIO_voidSetPinDir+0xf8>
					{
						case DIO_PORTA: SET_BIT(DDRA,u8PinId); break;
     ca6:	2a b3       	in	r18, 0x1a	; 26
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	ac 01       	movw	r20, r24
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_voidSetPinDir+0xba>
     cb0:	44 0f       	add	r20, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	6a 95       	dec	r22
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_voidSetPinDir+0xb6>
     cb8:	ba 01       	movw	r22, r20
     cba:	62 2b       	or	r22, r18
     cbc:	6a bb       	out	0x1a, r22	; 26
     cbe:	08 95       	ret
						case DIO_PORTB: SET_BIT(DDRB,u8PinId); break;
     cc0:	27 b3       	in	r18, 0x17	; 23
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	ac 01       	movw	r20, r24
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <DIO_voidSetPinDir+0xd4>
     cca:	44 0f       	add	r20, r20
     ccc:	55 1f       	adc	r21, r21
     cce:	6a 95       	dec	r22
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <DIO_voidSetPinDir+0xd0>
     cd2:	ba 01       	movw	r22, r20
     cd4:	62 2b       	or	r22, r18
     cd6:	67 bb       	out	0x17, r22	; 23
     cd8:	08 95       	ret
						case DIO_PORTC: SET_BIT(DDRC,u8PinId); break;
     cda:	44 b3       	in	r20, 0x14	; 20
     cdc:	21 e0       	ldi	r18, 0x01	; 1
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	c9 01       	movw	r24, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_voidSetPinDir+0xee>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	6a 95       	dec	r22
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_voidSetPinDir+0xea>
     cec:	84 2b       	or	r24, r20
     cee:	84 bb       	out	0x14, r24	; 20
     cf0:	08 95       	ret
						case DIO_PORTD: SET_BIT(DDRD,u8PinId); break;
     cf2:	41 b3       	in	r20, 0x11	; 17
     cf4:	21 e0       	ldi	r18, 0x01	; 1
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	c9 01       	movw	r24, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_voidSetPinDir+0x106>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	6a 95       	dec	r22
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_voidSetPinDir+0x102>
     d04:	84 2b       	or	r24, r20
     d06:	81 bb       	out	0x11, r24	; 17
     d08:	08 95       	ret

00000d0a <DIO_voidSetPinVal>:



void DIO_voidSetPinVal(u8 u8PortId, u8 u8PinId, u8 u8PinVal)
{
		if (u8PortId <=  DIO_PORTD && u8PinId <= DIO_PIN7 )
     d0a:	84 30       	cpi	r24, 0x04	; 4
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <DIO_voidSetPinVal+0x6>
     d0e:	84 c0       	rjmp	.+264    	; 0xe18 <DIO_voidSetPinVal+0x10e>
     d10:	68 30       	cpi	r22, 0x08	; 8
     d12:	08 f0       	brcs	.+2      	; 0xd16 <DIO_voidSetPinVal+0xc>
     d14:	81 c0       	rjmp	.+258    	; 0xe18 <DIO_voidSetPinVal+0x10e>
		{

			if (u8PinVal == DIO_PIN_LOW)
     d16:	44 23       	and	r20, r20
     d18:	09 f0       	breq	.+2      	; 0xd1c <DIO_voidSetPinVal+0x12>
     d1a:	42 c0       	rjmp	.+132    	; 0xda0 <DIO_voidSetPinVal+0x96>
				{
					switch(u8PortId)
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	b1 f0       	breq	.+44     	; 0xd4c <DIO_voidSetPinVal+0x42>
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	30 f0       	brcs	.+12     	; 0xd30 <DIO_voidSetPinVal+0x26>
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	01 f1       	breq	.+64     	; 0xd68 <DIO_voidSetPinVal+0x5e>
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	09 f0       	breq	.+2      	; 0xd2e <DIO_voidSetPinVal+0x24>
     d2c:	75 c0       	rjmp	.+234    	; 0xe18 <DIO_voidSetPinVal+0x10e>
     d2e:	2a c0       	rjmp	.+84     	; 0xd84 <DIO_voidSetPinVal+0x7a>
					{
						case DIO_PORTA: CLR_BIT(PORTA,u8PinId); break;
     d30:	2b b3       	in	r18, 0x1b	; 27
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	ac 01       	movw	r20, r24
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <DIO_voidSetPinVal+0x34>
     d3a:	44 0f       	add	r20, r20
     d3c:	55 1f       	adc	r21, r21
     d3e:	6a 95       	dec	r22
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <DIO_voidSetPinVal+0x30>
     d42:	ba 01       	movw	r22, r20
     d44:	60 95       	com	r22
     d46:	62 23       	and	r22, r18
     d48:	6b bb       	out	0x1b, r22	; 27
     d4a:	08 95       	ret
						case DIO_PORTB: CLR_BIT(PORTB,u8PinId); break;
     d4c:	28 b3       	in	r18, 0x18	; 24
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	ac 01       	movw	r20, r24
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_voidSetPinVal+0x50>
     d56:	44 0f       	add	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	6a 95       	dec	r22
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_voidSetPinVal+0x4c>
     d5e:	ba 01       	movw	r22, r20
     d60:	60 95       	com	r22
     d62:	62 23       	and	r22, r18
     d64:	68 bb       	out	0x18, r22	; 24
     d66:	08 95       	ret
						case DIO_PORTC: CLR_BIT(PORTC,u8PinId); break;
     d68:	25 b3       	in	r18, 0x15	; 21
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	ac 01       	movw	r20, r24
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <DIO_voidSetPinVal+0x6c>
     d72:	44 0f       	add	r20, r20
     d74:	55 1f       	adc	r21, r21
     d76:	6a 95       	dec	r22
     d78:	e2 f7       	brpl	.-8      	; 0xd72 <DIO_voidSetPinVal+0x68>
     d7a:	ba 01       	movw	r22, r20
     d7c:	60 95       	com	r22
     d7e:	62 23       	and	r22, r18
     d80:	65 bb       	out	0x15, r22	; 21
     d82:	08 95       	ret
						case DIO_PORTD: CLR_BIT(PORTD,u8PinId); break;
     d84:	22 b3       	in	r18, 0x12	; 18
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	ac 01       	movw	r20, r24
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_voidSetPinVal+0x88>
     d8e:	44 0f       	add	r20, r20
     d90:	55 1f       	adc	r21, r21
     d92:	6a 95       	dec	r22
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_voidSetPinVal+0x84>
     d96:	ba 01       	movw	r22, r20
     d98:	60 95       	com	r22
     d9a:	62 23       	and	r22, r18
     d9c:	62 bb       	out	0x12, r22	; 18
     d9e:	08 95       	ret
					}
				}
				else if (u8PinVal == DIO_PIN_HIGH)
     da0:	41 30       	cpi	r20, 0x01	; 1
     da2:	d1 f5       	brne	.+116    	; 0xe18 <DIO_voidSetPinVal+0x10e>
				{
					switch(u8PortId)
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	a1 f0       	breq	.+40     	; 0xdd0 <DIO_voidSetPinVal+0xc6>
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	28 f0       	brcs	.+10     	; 0xdb6 <DIO_voidSetPinVal+0xac>
     dac:	82 30       	cpi	r24, 0x02	; 2
     dae:	e9 f0       	breq	.+58     	; 0xdea <DIO_voidSetPinVal+0xe0>
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	91 f5       	brne	.+100    	; 0xe18 <DIO_voidSetPinVal+0x10e>
     db4:	26 c0       	rjmp	.+76     	; 0xe02 <DIO_voidSetPinVal+0xf8>
					{
						case DIO_PORTA: SET_BIT(PORTA,u8PinId); break;
     db6:	2b b3       	in	r18, 0x1b	; 27
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	ac 01       	movw	r20, r24
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_voidSetPinVal+0xba>
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	6a 95       	dec	r22
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_voidSetPinVal+0xb6>
     dc8:	ba 01       	movw	r22, r20
     dca:	62 2b       	or	r22, r18
     dcc:	6b bb       	out	0x1b, r22	; 27
     dce:	08 95       	ret
						case DIO_PORTB: SET_BIT(PORTB,u8PinId); break;
     dd0:	28 b3       	in	r18, 0x18	; 24
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	ac 01       	movw	r20, r24
     dd8:	02 c0       	rjmp	.+4      	; 0xdde <DIO_voidSetPinVal+0xd4>
     dda:	44 0f       	add	r20, r20
     ddc:	55 1f       	adc	r21, r21
     dde:	6a 95       	dec	r22
     de0:	e2 f7       	brpl	.-8      	; 0xdda <DIO_voidSetPinVal+0xd0>
     de2:	ba 01       	movw	r22, r20
     de4:	62 2b       	or	r22, r18
     de6:	68 bb       	out	0x18, r22	; 24
     de8:	08 95       	ret
						case DIO_PORTC: SET_BIT(PORTC,u8PinId); break;
     dea:	45 b3       	in	r20, 0x15	; 21
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	c9 01       	movw	r24, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_voidSetPinVal+0xee>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	6a 95       	dec	r22
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_voidSetPinVal+0xea>
     dfc:	84 2b       	or	r24, r20
     dfe:	85 bb       	out	0x15, r24	; 21
     e00:	08 95       	ret
						case DIO_PORTD: SET_BIT(PORTD,u8PinId); break;
     e02:	42 b3       	in	r20, 0x12	; 18
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	c9 01       	movw	r24, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_voidSetPinVal+0x106>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	6a 95       	dec	r22
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_voidSetPinVal+0x102>
     e14:	84 2b       	or	r24, r20
     e16:	82 bb       	out	0x12, r24	; 18
     e18:	08 95       	ret

00000e1a <DIO_voidTogPinVal>:
}


void DIO_voidTogPinVal(u8 u8PortId, u8 u8PinId)
{
		if (u8PortId <=  DIO_PORTD && u8PinId <= DIO_PIN7 )
     e1a:	84 30       	cpi	r24, 0x04	; 4
     e1c:	08 f0       	brcs	.+2      	; 0xe20 <DIO_voidTogPinVal+0x6>
     e1e:	3f c0       	rjmp	.+126    	; 0xe9e <DIO_voidTogPinVal+0x84>
     e20:	68 30       	cpi	r22, 0x08	; 8
     e22:	08 f0       	brcs	.+2      	; 0xe26 <DIO_voidTogPinVal+0xc>
     e24:	3c c0       	rjmp	.+120    	; 0xe9e <DIO_voidTogPinVal+0x84>
		{
					switch(u8PortId)
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	a1 f0       	breq	.+40     	; 0xe52 <DIO_voidTogPinVal+0x38>
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	28 f0       	brcs	.+10     	; 0xe38 <DIO_voidTogPinVal+0x1e>
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	e9 f0       	breq	.+58     	; 0xe6c <DIO_voidTogPinVal+0x52>
     e32:	83 30       	cpi	r24, 0x03	; 3
     e34:	a1 f5       	brne	.+104    	; 0xe9e <DIO_voidTogPinVal+0x84>
     e36:	27 c0       	rjmp	.+78     	; 0xe86 <DIO_voidTogPinVal+0x6c>
					{
						case DIO_PORTA: TOG_BIT(PORTA,u8PinId); break;
     e38:	2b b3       	in	r18, 0x1b	; 27
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	ac 01       	movw	r20, r24
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_voidTogPinVal+0x2c>
     e42:	44 0f       	add	r20, r20
     e44:	55 1f       	adc	r21, r21
     e46:	6a 95       	dec	r22
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_voidTogPinVal+0x28>
     e4a:	ba 01       	movw	r22, r20
     e4c:	62 27       	eor	r22, r18
     e4e:	6b bb       	out	0x1b, r22	; 27
     e50:	08 95       	ret
						case DIO_PORTB: TOG_BIT(PORTB,u8PinId); break;
     e52:	28 b3       	in	r18, 0x18	; 24
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	ac 01       	movw	r20, r24
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_voidTogPinVal+0x46>
     e5c:	44 0f       	add	r20, r20
     e5e:	55 1f       	adc	r21, r21
     e60:	6a 95       	dec	r22
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_voidTogPinVal+0x42>
     e64:	ba 01       	movw	r22, r20
     e66:	62 27       	eor	r22, r18
     e68:	68 bb       	out	0x18, r22	; 24
     e6a:	08 95       	ret
						case DIO_PORTC: TOG_BIT(PORTC,u8PinId); break;
     e6c:	25 b3       	in	r18, 0x15	; 21
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	ac 01       	movw	r20, r24
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_voidTogPinVal+0x60>
     e76:	44 0f       	add	r20, r20
     e78:	55 1f       	adc	r21, r21
     e7a:	6a 95       	dec	r22
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <DIO_voidTogPinVal+0x5c>
     e7e:	ba 01       	movw	r22, r20
     e80:	62 27       	eor	r22, r18
     e82:	65 bb       	out	0x15, r22	; 21
     e84:	08 95       	ret
						case DIO_PORTD: TOG_BIT(PORTD,u8PinId); break;
     e86:	22 b3       	in	r18, 0x12	; 18
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	ac 01       	movw	r20, r24
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_voidTogPinVal+0x7a>
     e90:	44 0f       	add	r20, r20
     e92:	55 1f       	adc	r21, r21
     e94:	6a 95       	dec	r22
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_voidTogPinVal+0x76>
     e98:	ba 01       	movw	r22, r20
     e9a:	62 27       	eor	r22, r18
     e9c:	62 bb       	out	0x12, r22	; 18
     e9e:	08 95       	ret

00000ea0 <DIO_u8GetPinVal>:


u8 DIO_u8GetPinVal(u8 u8PortId, u8 u8PinId)
{

	if (u8PortId <=  DIO_PORTD && u8PinId <= DIO_PIN7 )
     ea0:	84 30       	cpi	r24, 0x04	; 4
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <DIO_u8GetPinVal+0x6>
     ea4:	5a c0       	rjmp	.+180    	; 0xf5a <DIO_u8GetPinVal+0xba>
     ea6:	68 30       	cpi	r22, 0x08	; 8
     ea8:	08 f0       	brcs	.+2      	; 0xeac <DIO_u8GetPinVal+0xc>
     eaa:	57 c0       	rjmp	.+174    	; 0xf5a <DIO_u8GetPinVal+0xba>
	{
		u8 u8Result;

		switch(u8PortId)
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	d9 f0       	breq	.+54     	; 0xee6 <DIO_u8GetPinVal+0x46>
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	30 f0       	brcs	.+12     	; 0xec0 <DIO_u8GetPinVal+0x20>
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	51 f1       	breq	.+84     	; 0xf0c <DIO_u8GetPinVal+0x6c>
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	09 f0       	breq	.+2      	; 0xebe <DIO_u8GetPinVal+0x1e>
     ebc:	4c c0       	rjmp	.+152    	; 0xf56 <DIO_u8GetPinVal+0xb6>
     ebe:	39 c0       	rjmp	.+114    	; 0xf32 <DIO_u8GetPinVal+0x92>
		{
			case DIO_PORTA: u8Result= READ_BIT(PINA,u8PinId); break;
     ec0:	29 b3       	in	r18, 0x19	; 25
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	06 2e       	mov	r0, r22
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_u8GetPinVal+0x2e>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_u8GetPinVal+0x2a>
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	82 23       	and	r24, r18
     ed6:	93 23       	and	r25, r19
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_u8GetPinVal+0x3e>
     eda:	95 95       	asr	r25
     edc:	87 95       	ror	r24
     ede:	6a 95       	dec	r22
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_u8GetPinVal+0x3a>
     ee2:	98 2f       	mov	r25, r24
     ee4:	38 c0       	rjmp	.+112    	; 0xf56 <DIO_u8GetPinVal+0xb6>
			case DIO_PORTB: u8Result= READ_BIT(PINB,u8PinId); break;
     ee6:	26 b3       	in	r18, 0x16	; 22
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	06 2e       	mov	r0, r22
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_u8GetPinVal+0x54>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_u8GetPinVal+0x50>
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	82 23       	and	r24, r18
     efc:	93 23       	and	r25, r19
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_u8GetPinVal+0x64>
     f00:	95 95       	asr	r25
     f02:	87 95       	ror	r24
     f04:	6a 95       	dec	r22
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_u8GetPinVal+0x60>
     f08:	98 2f       	mov	r25, r24
     f0a:	25 c0       	rjmp	.+74     	; 0xf56 <DIO_u8GetPinVal+0xb6>
			case DIO_PORTC: u8Result= READ_BIT(PINC,u8PinId); break;
     f0c:	23 b3       	in	r18, 0x13	; 19
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	06 2e       	mov	r0, r22
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_u8GetPinVal+0x7a>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_u8GetPinVal+0x76>
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	82 23       	and	r24, r18
     f22:	93 23       	and	r25, r19
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_u8GetPinVal+0x8a>
     f26:	95 95       	asr	r25
     f28:	87 95       	ror	r24
     f2a:	6a 95       	dec	r22
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_u8GetPinVal+0x86>
     f2e:	98 2f       	mov	r25, r24
     f30:	12 c0       	rjmp	.+36     	; 0xf56 <DIO_u8GetPinVal+0xb6>
			case DIO_PORTD: u8Result= READ_BIT(PIND,u8PinId); break;
     f32:	20 b3       	in	r18, 0x10	; 16
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	06 2e       	mov	r0, r22
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_u8GetPinVal+0xa0>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_u8GetPinVal+0x9c>
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	82 23       	and	r24, r18
     f48:	93 23       	and	r25, r19
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_u8GetPinVal+0xb0>
     f4c:	95 95       	asr	r25
     f4e:	87 95       	ror	r24
     f50:	6a 95       	dec	r22
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_u8GetPinVal+0xac>
     f54:	98 2f       	mov	r25, r24
		}
		return u8Result;
     f56:	89 2f       	mov	r24, r25
     f58:	08 95       	ret
	}
}
     f5a:	08 95       	ret

00000f5c <DIO_voidSetPortDir>:



void DIO_voidSetPortDir(u8 u8PortId, u8 u8PortDir)
{
	if (u8PortId <=  DIO_PORTD)
     f5c:	84 30       	cpi	r24, 0x04	; 4
     f5e:	80 f4       	brcc	.+32     	; 0xf80 <DIO_voidSetPortDir+0x24>
	{
			switch(u8PortId)
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	49 f0       	breq	.+18     	; 0xf76 <DIO_voidSetPortDir+0x1a>
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	28 f0       	brcs	.+10     	; 0xf72 <DIO_voidSetPortDir+0x16>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	39 f0       	breq	.+14     	; 0xf7a <DIO_voidSetPortDir+0x1e>
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	41 f4       	brne	.+16     	; 0xf80 <DIO_voidSetPortDir+0x24>
     f70:	06 c0       	rjmp	.+12     	; 0xf7e <DIO_voidSetPortDir+0x22>
			{
			case DIO_PORTA: DDRA =  u8PortDir; break;
     f72:	6a bb       	out	0x1a, r22	; 26
     f74:	08 95       	ret
			case DIO_PORTB: DDRB=  u8PortDir; break;
     f76:	67 bb       	out	0x17, r22	; 23
     f78:	08 95       	ret
			case DIO_PORTC: DDRC=  u8PortDir; break;
     f7a:	64 bb       	out	0x14, r22	; 20
     f7c:	08 95       	ret
			case DIO_PORTD: DDRD=  u8PortDir; break;
     f7e:	61 bb       	out	0x11, r22	; 17
     f80:	08 95       	ret

00000f82 <DIO_voidSetPortVal>:
}


void DIO_voidSetPortVal(u8 u8PortId, u8 u8PortVal)
{
	if (u8PortId <=  DIO_PORTD)
     f82:	84 30       	cpi	r24, 0x04	; 4
     f84:	80 f4       	brcc	.+32     	; 0xfa6 <DIO_voidSetPortVal+0x24>
	{
			switch(u8PortId)
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	49 f0       	breq	.+18     	; 0xf9c <DIO_voidSetPortVal+0x1a>
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	28 f0       	brcs	.+10     	; 0xf98 <DIO_voidSetPortVal+0x16>
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	39 f0       	breq	.+14     	; 0xfa0 <DIO_voidSetPortVal+0x1e>
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	41 f4       	brne	.+16     	; 0xfa6 <DIO_voidSetPortVal+0x24>
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <DIO_voidSetPortVal+0x22>
			{
			case DIO_PORTA: PORTA=  u8PortVal; break;
     f98:	6b bb       	out	0x1b, r22	; 27
     f9a:	08 95       	ret
			case DIO_PORTB: PORTB=  u8PortVal; break;
     f9c:	68 bb       	out	0x18, r22	; 24
     f9e:	08 95       	ret
			case DIO_PORTC: PORTC=  u8PortVal; break;
     fa0:	65 bb       	out	0x15, r22	; 21
     fa2:	08 95       	ret
			case DIO_PORTD: PORTD=  u8PortVal; break;
     fa4:	62 bb       	out	0x12, r22	; 18
     fa6:	08 95       	ret

00000fa8 <DIO_vconnectpullup>:
	}
}

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
     fa8:	82 34       	cpi	r24, 0x42	; 66
     faa:	51 f1       	breq	.+84     	; 0x1000 <DIO_vconnectpullup+0x58>
     fac:	83 34       	cpi	r24, 0x43	; 67
     fae:	20 f4       	brcc	.+8      	; 0xfb8 <DIO_vconnectpullup+0x10>
     fb0:	81 34       	cpi	r24, 0x41	; 65
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <DIO_vconnectpullup+0xe>
     fb4:	7b c0       	rjmp	.+246    	; 0x10ac <DIO_vconnectpullup+0x104>
     fb6:	07 c0       	rjmp	.+14     	; 0xfc6 <DIO_vconnectpullup+0x1e>
     fb8:	83 34       	cpi	r24, 0x43	; 67
     fba:	09 f4       	brne	.+2      	; 0xfbe <DIO_vconnectpullup+0x16>
     fbc:	3e c0       	rjmp	.+124    	; 0x103a <DIO_vconnectpullup+0x92>
     fbe:	84 34       	cpi	r24, 0x44	; 68
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <DIO_vconnectpullup+0x1c>
     fc2:	74 c0       	rjmp	.+232    	; 0x10ac <DIO_vconnectpullup+0x104>
     fc4:	57 c0       	rjmp	.+174    	; 0x1074 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==DIO_PIN_HIGH)
     fc6:	41 30       	cpi	r20, 0x01	; 1
     fc8:	69 f4       	brne	.+26     	; 0xfe4 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
     fca:	2b b3       	in	r18, 0x1b	; 27
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	ac 01       	movw	r20, r24
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_vconnectpullup+0x30>
     fd4:	44 0f       	add	r20, r20
     fd6:	55 1f       	adc	r21, r21
     fd8:	6a 95       	dec	r22
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_vconnectpullup+0x2c>
     fdc:	ba 01       	movw	r22, r20
     fde:	62 2b       	or	r22, r18
     fe0:	6b bb       	out	0x1b, r22	; 27
     fe2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     fe4:	2b b3       	in	r18, 0x1b	; 27
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	ac 01       	movw	r20, r24
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <DIO_vconnectpullup+0x4a>
     fee:	44 0f       	add	r20, r20
     ff0:	55 1f       	adc	r21, r21
     ff2:	6a 95       	dec	r22
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <DIO_vconnectpullup+0x46>
     ff6:	ba 01       	movw	r22, r20
     ff8:	60 95       	com	r22
     ffa:	62 23       	and	r22, r18
     ffc:	6b bb       	out	0x1b, r22	; 27
     ffe:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==DIO_PIN_HIGH)
    1000:	41 30       	cpi	r20, 0x01	; 1
    1002:	69 f4       	brne	.+26     	; 0x101e <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
    1004:	28 b3       	in	r18, 0x18	; 24
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	ac 01       	movw	r20, r24
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_vconnectpullup+0x6a>
    100e:	44 0f       	add	r20, r20
    1010:	55 1f       	adc	r21, r21
    1012:	6a 95       	dec	r22
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_vconnectpullup+0x66>
    1016:	ba 01       	movw	r22, r20
    1018:	62 2b       	or	r22, r18
    101a:	68 bb       	out	0x18, r22	; 24
    101c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    101e:	28 b3       	in	r18, 0x18	; 24
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	ac 01       	movw	r20, r24
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_vconnectpullup+0x84>
    1028:	44 0f       	add	r20, r20
    102a:	55 1f       	adc	r21, r21
    102c:	6a 95       	dec	r22
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_vconnectpullup+0x80>
    1030:	ba 01       	movw	r22, r20
    1032:	60 95       	com	r22
    1034:	62 23       	and	r22, r18
    1036:	68 bb       	out	0x18, r22	; 24
    1038:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==DIO_PIN_HIGH)
    103a:	41 30       	cpi	r20, 0x01	; 1
    103c:	69 f4       	brne	.+26     	; 0x1058 <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
    103e:	25 b3       	in	r18, 0x15	; 21
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	ac 01       	movw	r20, r24
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_vconnectpullup+0xa4>
    1048:	44 0f       	add	r20, r20
    104a:	55 1f       	adc	r21, r21
    104c:	6a 95       	dec	r22
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_vconnectpullup+0xa0>
    1050:	ba 01       	movw	r22, r20
    1052:	62 2b       	or	r22, r18
    1054:	65 bb       	out	0x15, r22	; 21
    1056:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    1058:	25 b3       	in	r18, 0x15	; 21
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	ac 01       	movw	r20, r24
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <DIO_vconnectpullup+0xbe>
    1062:	44 0f       	add	r20, r20
    1064:	55 1f       	adc	r21, r21
    1066:	6a 95       	dec	r22
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <DIO_vconnectpullup+0xba>
    106a:	ba 01       	movw	r22, r20
    106c:	60 95       	com	r22
    106e:	62 23       	and	r22, r18
    1070:	65 bb       	out	0x15, r22	; 21
    1072:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==DIO_PIN_HIGH)
    1074:	41 30       	cpi	r20, 0x01	; 1
    1076:	69 f4       	brne	.+26     	; 0x1092 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
    1078:	22 b3       	in	r18, 0x12	; 18
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	ac 01       	movw	r20, r24
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_vconnectpullup+0xde>
    1082:	44 0f       	add	r20, r20
    1084:	55 1f       	adc	r21, r21
    1086:	6a 95       	dec	r22
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_vconnectpullup+0xda>
    108a:	ba 01       	movw	r22, r20
    108c:	62 2b       	or	r22, r18
    108e:	62 bb       	out	0x12, r22	; 18
    1090:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    1092:	22 b3       	in	r18, 0x12	; 18
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	ac 01       	movw	r20, r24
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_vconnectpullup+0xf8>
    109c:	44 0f       	add	r20, r20
    109e:	55 1f       	adc	r21, r21
    10a0:	6a 95       	dec	r22
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_vconnectpullup+0xf4>
    10a4:	ba 01       	movw	r22, r20
    10a6:	60 95       	com	r22
    10a8:	62 23       	and	r22, r18
    10aa:	62 bb       	out	0x12, r22	; 18
    10ac:	08 95       	ret

000010ae <__subsf3>:
    10ae:	50 58       	subi	r21, 0x80	; 128

000010b0 <__addsf3>:
    10b0:	bb 27       	eor	r27, r27
    10b2:	aa 27       	eor	r26, r26
    10b4:	0e d0       	rcall	.+28     	; 0x10d2 <__addsf3x>
    10b6:	4d c1       	rjmp	.+666    	; 0x1352 <__fp_round>
    10b8:	3e d1       	rcall	.+636    	; 0x1336 <__fp_pscA>
    10ba:	30 f0       	brcs	.+12     	; 0x10c8 <__addsf3+0x18>
    10bc:	43 d1       	rcall	.+646    	; 0x1344 <__fp_pscB>
    10be:	20 f0       	brcs	.+8      	; 0x10c8 <__addsf3+0x18>
    10c0:	31 f4       	brne	.+12     	; 0x10ce <__addsf3+0x1e>
    10c2:	9f 3f       	cpi	r25, 0xFF	; 255
    10c4:	11 f4       	brne	.+4      	; 0x10ca <__addsf3+0x1a>
    10c6:	1e f4       	brtc	.+6      	; 0x10ce <__addsf3+0x1e>
    10c8:	33 c1       	rjmp	.+614    	; 0x1330 <__fp_nan>
    10ca:	0e f4       	brtc	.+2      	; 0x10ce <__addsf3+0x1e>
    10cc:	e0 95       	com	r30
    10ce:	e7 fb       	bst	r30, 7
    10d0:	29 c1       	rjmp	.+594    	; 0x1324 <__fp_inf>

000010d2 <__addsf3x>:
    10d2:	e9 2f       	mov	r30, r25
    10d4:	4f d1       	rcall	.+670    	; 0x1374 <__fp_split3>
    10d6:	80 f3       	brcs	.-32     	; 0x10b8 <__addsf3+0x8>
    10d8:	ba 17       	cp	r27, r26
    10da:	62 07       	cpc	r22, r18
    10dc:	73 07       	cpc	r23, r19
    10de:	84 07       	cpc	r24, r20
    10e0:	95 07       	cpc	r25, r21
    10e2:	18 f0       	brcs	.+6      	; 0x10ea <__addsf3x+0x18>
    10e4:	71 f4       	brne	.+28     	; 0x1102 <__addsf3x+0x30>
    10e6:	9e f5       	brtc	.+102    	; 0x114e <__addsf3x+0x7c>
    10e8:	67 c1       	rjmp	.+718    	; 0x13b8 <__fp_zero>
    10ea:	0e f4       	brtc	.+2      	; 0x10ee <__addsf3x+0x1c>
    10ec:	e0 95       	com	r30
    10ee:	0b 2e       	mov	r0, r27
    10f0:	ba 2f       	mov	r27, r26
    10f2:	a0 2d       	mov	r26, r0
    10f4:	0b 01       	movw	r0, r22
    10f6:	b9 01       	movw	r22, r18
    10f8:	90 01       	movw	r18, r0
    10fa:	0c 01       	movw	r0, r24
    10fc:	ca 01       	movw	r24, r20
    10fe:	a0 01       	movw	r20, r0
    1100:	11 24       	eor	r1, r1
    1102:	ff 27       	eor	r31, r31
    1104:	59 1b       	sub	r21, r25
    1106:	99 f0       	breq	.+38     	; 0x112e <__addsf3x+0x5c>
    1108:	59 3f       	cpi	r21, 0xF9	; 249
    110a:	50 f4       	brcc	.+20     	; 0x1120 <__addsf3x+0x4e>
    110c:	50 3e       	cpi	r21, 0xE0	; 224
    110e:	68 f1       	brcs	.+90     	; 0x116a <__addsf3x+0x98>
    1110:	1a 16       	cp	r1, r26
    1112:	f0 40       	sbci	r31, 0x00	; 0
    1114:	a2 2f       	mov	r26, r18
    1116:	23 2f       	mov	r18, r19
    1118:	34 2f       	mov	r19, r20
    111a:	44 27       	eor	r20, r20
    111c:	58 5f       	subi	r21, 0xF8	; 248
    111e:	f3 cf       	rjmp	.-26     	; 0x1106 <__addsf3x+0x34>
    1120:	46 95       	lsr	r20
    1122:	37 95       	ror	r19
    1124:	27 95       	ror	r18
    1126:	a7 95       	ror	r26
    1128:	f0 40       	sbci	r31, 0x00	; 0
    112a:	53 95       	inc	r21
    112c:	c9 f7       	brne	.-14     	; 0x1120 <__addsf3x+0x4e>
    112e:	7e f4       	brtc	.+30     	; 0x114e <__addsf3x+0x7c>
    1130:	1f 16       	cp	r1, r31
    1132:	ba 0b       	sbc	r27, r26
    1134:	62 0b       	sbc	r22, r18
    1136:	73 0b       	sbc	r23, r19
    1138:	84 0b       	sbc	r24, r20
    113a:	ba f0       	brmi	.+46     	; 0x116a <__addsf3x+0x98>
    113c:	91 50       	subi	r25, 0x01	; 1
    113e:	a1 f0       	breq	.+40     	; 0x1168 <__addsf3x+0x96>
    1140:	ff 0f       	add	r31, r31
    1142:	bb 1f       	adc	r27, r27
    1144:	66 1f       	adc	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	88 1f       	adc	r24, r24
    114a:	c2 f7       	brpl	.-16     	; 0x113c <__addsf3x+0x6a>
    114c:	0e c0       	rjmp	.+28     	; 0x116a <__addsf3x+0x98>
    114e:	ba 0f       	add	r27, r26
    1150:	62 1f       	adc	r22, r18
    1152:	73 1f       	adc	r23, r19
    1154:	84 1f       	adc	r24, r20
    1156:	48 f4       	brcc	.+18     	; 0x116a <__addsf3x+0x98>
    1158:	87 95       	ror	r24
    115a:	77 95       	ror	r23
    115c:	67 95       	ror	r22
    115e:	b7 95       	ror	r27
    1160:	f7 95       	ror	r31
    1162:	9e 3f       	cpi	r25, 0xFE	; 254
    1164:	08 f0       	brcs	.+2      	; 0x1168 <__addsf3x+0x96>
    1166:	b3 cf       	rjmp	.-154    	; 0x10ce <__addsf3+0x1e>
    1168:	93 95       	inc	r25
    116a:	88 0f       	add	r24, r24
    116c:	08 f0       	brcs	.+2      	; 0x1170 <__addsf3x+0x9e>
    116e:	99 27       	eor	r25, r25
    1170:	ee 0f       	add	r30, r30
    1172:	97 95       	ror	r25
    1174:	87 95       	ror	r24
    1176:	08 95       	ret

00001178 <__divsf3>:
    1178:	0c d0       	rcall	.+24     	; 0x1192 <__divsf3x>
    117a:	eb c0       	rjmp	.+470    	; 0x1352 <__fp_round>
    117c:	e3 d0       	rcall	.+454    	; 0x1344 <__fp_pscB>
    117e:	40 f0       	brcs	.+16     	; 0x1190 <__divsf3+0x18>
    1180:	da d0       	rcall	.+436    	; 0x1336 <__fp_pscA>
    1182:	30 f0       	brcs	.+12     	; 0x1190 <__divsf3+0x18>
    1184:	21 f4       	brne	.+8      	; 0x118e <__divsf3+0x16>
    1186:	5f 3f       	cpi	r21, 0xFF	; 255
    1188:	19 f0       	breq	.+6      	; 0x1190 <__divsf3+0x18>
    118a:	cc c0       	rjmp	.+408    	; 0x1324 <__fp_inf>
    118c:	51 11       	cpse	r21, r1
    118e:	15 c1       	rjmp	.+554    	; 0x13ba <__fp_szero>
    1190:	cf c0       	rjmp	.+414    	; 0x1330 <__fp_nan>

00001192 <__divsf3x>:
    1192:	f0 d0       	rcall	.+480    	; 0x1374 <__fp_split3>
    1194:	98 f3       	brcs	.-26     	; 0x117c <__divsf3+0x4>

00001196 <__divsf3_pse>:
    1196:	99 23       	and	r25, r25
    1198:	c9 f3       	breq	.-14     	; 0x118c <__divsf3+0x14>
    119a:	55 23       	and	r21, r21
    119c:	b1 f3       	breq	.-20     	; 0x118a <__divsf3+0x12>
    119e:	95 1b       	sub	r25, r21
    11a0:	55 0b       	sbc	r21, r21
    11a2:	bb 27       	eor	r27, r27
    11a4:	aa 27       	eor	r26, r26
    11a6:	62 17       	cp	r22, r18
    11a8:	73 07       	cpc	r23, r19
    11aa:	84 07       	cpc	r24, r20
    11ac:	38 f0       	brcs	.+14     	; 0x11bc <__divsf3_pse+0x26>
    11ae:	9f 5f       	subi	r25, 0xFF	; 255
    11b0:	5f 4f       	sbci	r21, 0xFF	; 255
    11b2:	22 0f       	add	r18, r18
    11b4:	33 1f       	adc	r19, r19
    11b6:	44 1f       	adc	r20, r20
    11b8:	aa 1f       	adc	r26, r26
    11ba:	a9 f3       	breq	.-22     	; 0x11a6 <__divsf3_pse+0x10>
    11bc:	33 d0       	rcall	.+102    	; 0x1224 <__divsf3_pse+0x8e>
    11be:	0e 2e       	mov	r0, r30
    11c0:	3a f0       	brmi	.+14     	; 0x11d0 <__divsf3_pse+0x3a>
    11c2:	e0 e8       	ldi	r30, 0x80	; 128
    11c4:	30 d0       	rcall	.+96     	; 0x1226 <__divsf3_pse+0x90>
    11c6:	91 50       	subi	r25, 0x01	; 1
    11c8:	50 40       	sbci	r21, 0x00	; 0
    11ca:	e6 95       	lsr	r30
    11cc:	00 1c       	adc	r0, r0
    11ce:	ca f7       	brpl	.-14     	; 0x11c2 <__divsf3_pse+0x2c>
    11d0:	29 d0       	rcall	.+82     	; 0x1224 <__divsf3_pse+0x8e>
    11d2:	fe 2f       	mov	r31, r30
    11d4:	27 d0       	rcall	.+78     	; 0x1224 <__divsf3_pse+0x8e>
    11d6:	66 0f       	add	r22, r22
    11d8:	77 1f       	adc	r23, r23
    11da:	88 1f       	adc	r24, r24
    11dc:	bb 1f       	adc	r27, r27
    11de:	26 17       	cp	r18, r22
    11e0:	37 07       	cpc	r19, r23
    11e2:	48 07       	cpc	r20, r24
    11e4:	ab 07       	cpc	r26, r27
    11e6:	b0 e8       	ldi	r27, 0x80	; 128
    11e8:	09 f0       	breq	.+2      	; 0x11ec <__divsf3_pse+0x56>
    11ea:	bb 0b       	sbc	r27, r27
    11ec:	80 2d       	mov	r24, r0
    11ee:	bf 01       	movw	r22, r30
    11f0:	ff 27       	eor	r31, r31
    11f2:	93 58       	subi	r25, 0x83	; 131
    11f4:	5f 4f       	sbci	r21, 0xFF	; 255
    11f6:	2a f0       	brmi	.+10     	; 0x1202 <__divsf3_pse+0x6c>
    11f8:	9e 3f       	cpi	r25, 0xFE	; 254
    11fa:	51 05       	cpc	r21, r1
    11fc:	68 f0       	brcs	.+26     	; 0x1218 <__divsf3_pse+0x82>
    11fe:	92 c0       	rjmp	.+292    	; 0x1324 <__fp_inf>
    1200:	dc c0       	rjmp	.+440    	; 0x13ba <__fp_szero>
    1202:	5f 3f       	cpi	r21, 0xFF	; 255
    1204:	ec f3       	brlt	.-6      	; 0x1200 <__divsf3_pse+0x6a>
    1206:	98 3e       	cpi	r25, 0xE8	; 232
    1208:	dc f3       	brlt	.-10     	; 0x1200 <__divsf3_pse+0x6a>
    120a:	86 95       	lsr	r24
    120c:	77 95       	ror	r23
    120e:	67 95       	ror	r22
    1210:	b7 95       	ror	r27
    1212:	f7 95       	ror	r31
    1214:	9f 5f       	subi	r25, 0xFF	; 255
    1216:	c9 f7       	brne	.-14     	; 0x120a <__divsf3_pse+0x74>
    1218:	88 0f       	add	r24, r24
    121a:	91 1d       	adc	r25, r1
    121c:	96 95       	lsr	r25
    121e:	87 95       	ror	r24
    1220:	97 f9       	bld	r25, 7
    1222:	08 95       	ret
    1224:	e1 e0       	ldi	r30, 0x01	; 1
    1226:	66 0f       	add	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	88 1f       	adc	r24, r24
    122c:	bb 1f       	adc	r27, r27
    122e:	62 17       	cp	r22, r18
    1230:	73 07       	cpc	r23, r19
    1232:	84 07       	cpc	r24, r20
    1234:	ba 07       	cpc	r27, r26
    1236:	20 f0       	brcs	.+8      	; 0x1240 <__divsf3_pse+0xaa>
    1238:	62 1b       	sub	r22, r18
    123a:	73 0b       	sbc	r23, r19
    123c:	84 0b       	sbc	r24, r20
    123e:	ba 0b       	sbc	r27, r26
    1240:	ee 1f       	adc	r30, r30
    1242:	88 f7       	brcc	.-30     	; 0x1226 <__divsf3_pse+0x90>
    1244:	e0 95       	com	r30
    1246:	08 95       	ret

00001248 <__fixsfsi>:
    1248:	04 d0       	rcall	.+8      	; 0x1252 <__fixunssfsi>
    124a:	68 94       	set
    124c:	b1 11       	cpse	r27, r1
    124e:	b5 c0       	rjmp	.+362    	; 0x13ba <__fp_szero>
    1250:	08 95       	ret

00001252 <__fixunssfsi>:
    1252:	98 d0       	rcall	.+304    	; 0x1384 <__fp_splitA>
    1254:	88 f0       	brcs	.+34     	; 0x1278 <__fixunssfsi+0x26>
    1256:	9f 57       	subi	r25, 0x7F	; 127
    1258:	90 f0       	brcs	.+36     	; 0x127e <__fixunssfsi+0x2c>
    125a:	b9 2f       	mov	r27, r25
    125c:	99 27       	eor	r25, r25
    125e:	b7 51       	subi	r27, 0x17	; 23
    1260:	a0 f0       	brcs	.+40     	; 0x128a <__fixunssfsi+0x38>
    1262:	d1 f0       	breq	.+52     	; 0x1298 <__fixunssfsi+0x46>
    1264:	66 0f       	add	r22, r22
    1266:	77 1f       	adc	r23, r23
    1268:	88 1f       	adc	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	1a f0       	brmi	.+6      	; 0x1274 <__fixunssfsi+0x22>
    126e:	ba 95       	dec	r27
    1270:	c9 f7       	brne	.-14     	; 0x1264 <__fixunssfsi+0x12>
    1272:	12 c0       	rjmp	.+36     	; 0x1298 <__fixunssfsi+0x46>
    1274:	b1 30       	cpi	r27, 0x01	; 1
    1276:	81 f0       	breq	.+32     	; 0x1298 <__fixunssfsi+0x46>
    1278:	9f d0       	rcall	.+318    	; 0x13b8 <__fp_zero>
    127a:	b1 e0       	ldi	r27, 0x01	; 1
    127c:	08 95       	ret
    127e:	9c c0       	rjmp	.+312    	; 0x13b8 <__fp_zero>
    1280:	67 2f       	mov	r22, r23
    1282:	78 2f       	mov	r23, r24
    1284:	88 27       	eor	r24, r24
    1286:	b8 5f       	subi	r27, 0xF8	; 248
    1288:	39 f0       	breq	.+14     	; 0x1298 <__fixunssfsi+0x46>
    128a:	b9 3f       	cpi	r27, 0xF9	; 249
    128c:	cc f3       	brlt	.-14     	; 0x1280 <__fixunssfsi+0x2e>
    128e:	86 95       	lsr	r24
    1290:	77 95       	ror	r23
    1292:	67 95       	ror	r22
    1294:	b3 95       	inc	r27
    1296:	d9 f7       	brne	.-10     	; 0x128e <__fixunssfsi+0x3c>
    1298:	3e f4       	brtc	.+14     	; 0x12a8 <__fixunssfsi+0x56>
    129a:	90 95       	com	r25
    129c:	80 95       	com	r24
    129e:	70 95       	com	r23
    12a0:	61 95       	neg	r22
    12a2:	7f 4f       	sbci	r23, 0xFF	; 255
    12a4:	8f 4f       	sbci	r24, 0xFF	; 255
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	08 95       	ret

000012aa <__floatunsisf>:
    12aa:	e8 94       	clt
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <__floatsisf+0x12>

000012ae <__floatsisf>:
    12ae:	97 fb       	bst	r25, 7
    12b0:	3e f4       	brtc	.+14     	; 0x12c0 <__floatsisf+0x12>
    12b2:	90 95       	com	r25
    12b4:	80 95       	com	r24
    12b6:	70 95       	com	r23
    12b8:	61 95       	neg	r22
    12ba:	7f 4f       	sbci	r23, 0xFF	; 255
    12bc:	8f 4f       	sbci	r24, 0xFF	; 255
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	99 23       	and	r25, r25
    12c2:	a9 f0       	breq	.+42     	; 0x12ee <__floatsisf+0x40>
    12c4:	f9 2f       	mov	r31, r25
    12c6:	96 e9       	ldi	r25, 0x96	; 150
    12c8:	bb 27       	eor	r27, r27
    12ca:	93 95       	inc	r25
    12cc:	f6 95       	lsr	r31
    12ce:	87 95       	ror	r24
    12d0:	77 95       	ror	r23
    12d2:	67 95       	ror	r22
    12d4:	b7 95       	ror	r27
    12d6:	f1 11       	cpse	r31, r1
    12d8:	f8 cf       	rjmp	.-16     	; 0x12ca <__floatsisf+0x1c>
    12da:	fa f4       	brpl	.+62     	; 0x131a <__floatsisf+0x6c>
    12dc:	bb 0f       	add	r27, r27
    12de:	11 f4       	brne	.+4      	; 0x12e4 <__floatsisf+0x36>
    12e0:	60 ff       	sbrs	r22, 0
    12e2:	1b c0       	rjmp	.+54     	; 0x131a <__floatsisf+0x6c>
    12e4:	6f 5f       	subi	r22, 0xFF	; 255
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	8f 4f       	sbci	r24, 0xFF	; 255
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	16 c0       	rjmp	.+44     	; 0x131a <__floatsisf+0x6c>
    12ee:	88 23       	and	r24, r24
    12f0:	11 f0       	breq	.+4      	; 0x12f6 <__floatsisf+0x48>
    12f2:	96 e9       	ldi	r25, 0x96	; 150
    12f4:	11 c0       	rjmp	.+34     	; 0x1318 <__floatsisf+0x6a>
    12f6:	77 23       	and	r23, r23
    12f8:	21 f0       	breq	.+8      	; 0x1302 <__floatsisf+0x54>
    12fa:	9e e8       	ldi	r25, 0x8E	; 142
    12fc:	87 2f       	mov	r24, r23
    12fe:	76 2f       	mov	r23, r22
    1300:	05 c0       	rjmp	.+10     	; 0x130c <__floatsisf+0x5e>
    1302:	66 23       	and	r22, r22
    1304:	71 f0       	breq	.+28     	; 0x1322 <__floatsisf+0x74>
    1306:	96 e8       	ldi	r25, 0x86	; 134
    1308:	86 2f       	mov	r24, r22
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	2a f0       	brmi	.+10     	; 0x131a <__floatsisf+0x6c>
    1310:	9a 95       	dec	r25
    1312:	66 0f       	add	r22, r22
    1314:	77 1f       	adc	r23, r23
    1316:	88 1f       	adc	r24, r24
    1318:	da f7       	brpl	.-10     	; 0x1310 <__floatsisf+0x62>
    131a:	88 0f       	add	r24, r24
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	97 f9       	bld	r25, 7
    1322:	08 95       	ret

00001324 <__fp_inf>:
    1324:	97 f9       	bld	r25, 7
    1326:	9f 67       	ori	r25, 0x7F	; 127
    1328:	80 e8       	ldi	r24, 0x80	; 128
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	08 95       	ret

00001330 <__fp_nan>:
    1330:	9f ef       	ldi	r25, 0xFF	; 255
    1332:	80 ec       	ldi	r24, 0xC0	; 192
    1334:	08 95       	ret

00001336 <__fp_pscA>:
    1336:	00 24       	eor	r0, r0
    1338:	0a 94       	dec	r0
    133a:	16 16       	cp	r1, r22
    133c:	17 06       	cpc	r1, r23
    133e:	18 06       	cpc	r1, r24
    1340:	09 06       	cpc	r0, r25
    1342:	08 95       	ret

00001344 <__fp_pscB>:
    1344:	00 24       	eor	r0, r0
    1346:	0a 94       	dec	r0
    1348:	12 16       	cp	r1, r18
    134a:	13 06       	cpc	r1, r19
    134c:	14 06       	cpc	r1, r20
    134e:	05 06       	cpc	r0, r21
    1350:	08 95       	ret

00001352 <__fp_round>:
    1352:	09 2e       	mov	r0, r25
    1354:	03 94       	inc	r0
    1356:	00 0c       	add	r0, r0
    1358:	11 f4       	brne	.+4      	; 0x135e <__fp_round+0xc>
    135a:	88 23       	and	r24, r24
    135c:	52 f0       	brmi	.+20     	; 0x1372 <__fp_round+0x20>
    135e:	bb 0f       	add	r27, r27
    1360:	40 f4       	brcc	.+16     	; 0x1372 <__fp_round+0x20>
    1362:	bf 2b       	or	r27, r31
    1364:	11 f4       	brne	.+4      	; 0x136a <__fp_round+0x18>
    1366:	60 ff       	sbrs	r22, 0
    1368:	04 c0       	rjmp	.+8      	; 0x1372 <__fp_round+0x20>
    136a:	6f 5f       	subi	r22, 0xFF	; 255
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	8f 4f       	sbci	r24, 0xFF	; 255
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	08 95       	ret

00001374 <__fp_split3>:
    1374:	57 fd       	sbrc	r21, 7
    1376:	90 58       	subi	r25, 0x80	; 128
    1378:	44 0f       	add	r20, r20
    137a:	55 1f       	adc	r21, r21
    137c:	59 f0       	breq	.+22     	; 0x1394 <__fp_splitA+0x10>
    137e:	5f 3f       	cpi	r21, 0xFF	; 255
    1380:	71 f0       	breq	.+28     	; 0x139e <__fp_splitA+0x1a>
    1382:	47 95       	ror	r20

00001384 <__fp_splitA>:
    1384:	88 0f       	add	r24, r24
    1386:	97 fb       	bst	r25, 7
    1388:	99 1f       	adc	r25, r25
    138a:	61 f0       	breq	.+24     	; 0x13a4 <__fp_splitA+0x20>
    138c:	9f 3f       	cpi	r25, 0xFF	; 255
    138e:	79 f0       	breq	.+30     	; 0x13ae <__fp_splitA+0x2a>
    1390:	87 95       	ror	r24
    1392:	08 95       	ret
    1394:	12 16       	cp	r1, r18
    1396:	13 06       	cpc	r1, r19
    1398:	14 06       	cpc	r1, r20
    139a:	55 1f       	adc	r21, r21
    139c:	f2 cf       	rjmp	.-28     	; 0x1382 <__fp_split3+0xe>
    139e:	46 95       	lsr	r20
    13a0:	f1 df       	rcall	.-30     	; 0x1384 <__fp_splitA>
    13a2:	08 c0       	rjmp	.+16     	; 0x13b4 <__fp_splitA+0x30>
    13a4:	16 16       	cp	r1, r22
    13a6:	17 06       	cpc	r1, r23
    13a8:	18 06       	cpc	r1, r24
    13aa:	99 1f       	adc	r25, r25
    13ac:	f1 cf       	rjmp	.-30     	; 0x1390 <__fp_splitA+0xc>
    13ae:	86 95       	lsr	r24
    13b0:	71 05       	cpc	r23, r1
    13b2:	61 05       	cpc	r22, r1
    13b4:	08 94       	sec
    13b6:	08 95       	ret

000013b8 <__fp_zero>:
    13b8:	e8 94       	clt

000013ba <__fp_szero>:
    13ba:	bb 27       	eor	r27, r27
    13bc:	66 27       	eor	r22, r22
    13be:	77 27       	eor	r23, r23
    13c0:	cb 01       	movw	r24, r22
    13c2:	97 f9       	bld	r25, 7
    13c4:	08 95       	ret

000013c6 <__mulsf3>:
    13c6:	0b d0       	rcall	.+22     	; 0x13de <__mulsf3x>
    13c8:	c4 cf       	rjmp	.-120    	; 0x1352 <__fp_round>
    13ca:	b5 df       	rcall	.-150    	; 0x1336 <__fp_pscA>
    13cc:	28 f0       	brcs	.+10     	; 0x13d8 <__mulsf3+0x12>
    13ce:	ba df       	rcall	.-140    	; 0x1344 <__fp_pscB>
    13d0:	18 f0       	brcs	.+6      	; 0x13d8 <__mulsf3+0x12>
    13d2:	95 23       	and	r25, r21
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <__mulsf3+0x12>
    13d6:	a6 cf       	rjmp	.-180    	; 0x1324 <__fp_inf>
    13d8:	ab cf       	rjmp	.-170    	; 0x1330 <__fp_nan>
    13da:	11 24       	eor	r1, r1
    13dc:	ee cf       	rjmp	.-36     	; 0x13ba <__fp_szero>

000013de <__mulsf3x>:
    13de:	ca df       	rcall	.-108    	; 0x1374 <__fp_split3>
    13e0:	a0 f3       	brcs	.-24     	; 0x13ca <__mulsf3+0x4>

000013e2 <__mulsf3_pse>:
    13e2:	95 9f       	mul	r25, r21
    13e4:	d1 f3       	breq	.-12     	; 0x13da <__mulsf3+0x14>
    13e6:	95 0f       	add	r25, r21
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	55 1f       	adc	r21, r21
    13ec:	62 9f       	mul	r22, r18
    13ee:	f0 01       	movw	r30, r0
    13f0:	72 9f       	mul	r23, r18
    13f2:	bb 27       	eor	r27, r27
    13f4:	f0 0d       	add	r31, r0
    13f6:	b1 1d       	adc	r27, r1
    13f8:	63 9f       	mul	r22, r19
    13fa:	aa 27       	eor	r26, r26
    13fc:	f0 0d       	add	r31, r0
    13fe:	b1 1d       	adc	r27, r1
    1400:	aa 1f       	adc	r26, r26
    1402:	64 9f       	mul	r22, r20
    1404:	66 27       	eor	r22, r22
    1406:	b0 0d       	add	r27, r0
    1408:	a1 1d       	adc	r26, r1
    140a:	66 1f       	adc	r22, r22
    140c:	82 9f       	mul	r24, r18
    140e:	22 27       	eor	r18, r18
    1410:	b0 0d       	add	r27, r0
    1412:	a1 1d       	adc	r26, r1
    1414:	62 1f       	adc	r22, r18
    1416:	73 9f       	mul	r23, r19
    1418:	b0 0d       	add	r27, r0
    141a:	a1 1d       	adc	r26, r1
    141c:	62 1f       	adc	r22, r18
    141e:	83 9f       	mul	r24, r19
    1420:	a0 0d       	add	r26, r0
    1422:	61 1d       	adc	r22, r1
    1424:	22 1f       	adc	r18, r18
    1426:	74 9f       	mul	r23, r20
    1428:	33 27       	eor	r19, r19
    142a:	a0 0d       	add	r26, r0
    142c:	61 1d       	adc	r22, r1
    142e:	23 1f       	adc	r18, r19
    1430:	84 9f       	mul	r24, r20
    1432:	60 0d       	add	r22, r0
    1434:	21 1d       	adc	r18, r1
    1436:	82 2f       	mov	r24, r18
    1438:	76 2f       	mov	r23, r22
    143a:	6a 2f       	mov	r22, r26
    143c:	11 24       	eor	r1, r1
    143e:	9f 57       	subi	r25, 0x7F	; 127
    1440:	50 40       	sbci	r21, 0x00	; 0
    1442:	8a f0       	brmi	.+34     	; 0x1466 <__mulsf3_pse+0x84>
    1444:	e1 f0       	breq	.+56     	; 0x147e <__mulsf3_pse+0x9c>
    1446:	88 23       	and	r24, r24
    1448:	4a f0       	brmi	.+18     	; 0x145c <__mulsf3_pse+0x7a>
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	bb 1f       	adc	r27, r27
    1450:	66 1f       	adc	r22, r22
    1452:	77 1f       	adc	r23, r23
    1454:	88 1f       	adc	r24, r24
    1456:	91 50       	subi	r25, 0x01	; 1
    1458:	50 40       	sbci	r21, 0x00	; 0
    145a:	a9 f7       	brne	.-22     	; 0x1446 <__mulsf3_pse+0x64>
    145c:	9e 3f       	cpi	r25, 0xFE	; 254
    145e:	51 05       	cpc	r21, r1
    1460:	70 f0       	brcs	.+28     	; 0x147e <__mulsf3_pse+0x9c>
    1462:	60 cf       	rjmp	.-320    	; 0x1324 <__fp_inf>
    1464:	aa cf       	rjmp	.-172    	; 0x13ba <__fp_szero>
    1466:	5f 3f       	cpi	r21, 0xFF	; 255
    1468:	ec f3       	brlt	.-6      	; 0x1464 <__mulsf3_pse+0x82>
    146a:	98 3e       	cpi	r25, 0xE8	; 232
    146c:	dc f3       	brlt	.-10     	; 0x1464 <__mulsf3_pse+0x82>
    146e:	86 95       	lsr	r24
    1470:	77 95       	ror	r23
    1472:	67 95       	ror	r22
    1474:	b7 95       	ror	r27
    1476:	f7 95       	ror	r31
    1478:	e7 95       	ror	r30
    147a:	9f 5f       	subi	r25, 0xFF	; 255
    147c:	c1 f7       	brne	.-16     	; 0x146e <__mulsf3_pse+0x8c>
    147e:	fe 2b       	or	r31, r30
    1480:	88 0f       	add	r24, r24
    1482:	91 1d       	adc	r25, r1
    1484:	96 95       	lsr	r25
    1486:	87 95       	ror	r24
    1488:	97 f9       	bld	r25, 7
    148a:	08 95       	ret

0000148c <pow>:
    148c:	fa 01       	movw	r30, r20
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	30 96       	adiw	r30, 0x00	; 0
    1494:	21 05       	cpc	r18, r1
    1496:	31 05       	cpc	r19, r1
    1498:	99 f1       	breq	.+102    	; 0x1500 <pow+0x74>
    149a:	61 15       	cp	r22, r1
    149c:	71 05       	cpc	r23, r1
    149e:	61 f4       	brne	.+24     	; 0x14b8 <pow+0x2c>
    14a0:	80 38       	cpi	r24, 0x80	; 128
    14a2:	bf e3       	ldi	r27, 0x3F	; 63
    14a4:	9b 07       	cpc	r25, r27
    14a6:	49 f1       	breq	.+82     	; 0x14fa <pow+0x6e>
    14a8:	68 94       	set
    14aa:	90 38       	cpi	r25, 0x80	; 128
    14ac:	81 05       	cpc	r24, r1
    14ae:	61 f0       	breq	.+24     	; 0x14c8 <pow+0x3c>
    14b0:	80 38       	cpi	r24, 0x80	; 128
    14b2:	bf ef       	ldi	r27, 0xFF	; 255
    14b4:	9b 07       	cpc	r25, r27
    14b6:	41 f0       	breq	.+16     	; 0x14c8 <pow+0x3c>
    14b8:	99 23       	and	r25, r25
    14ba:	42 f5       	brpl	.+80     	; 0x150c <pow+0x80>
    14bc:	ff 3f       	cpi	r31, 0xFF	; 255
    14be:	e1 05       	cpc	r30, r1
    14c0:	31 05       	cpc	r19, r1
    14c2:	21 05       	cpc	r18, r1
    14c4:	11 f1       	breq	.+68     	; 0x150a <pow+0x7e>
    14c6:	e8 94       	clt
    14c8:	08 94       	sec
    14ca:	e7 95       	ror	r30
    14cc:	d9 01       	movw	r26, r18
    14ce:	aa 23       	and	r26, r26
    14d0:	29 f4       	brne	.+10     	; 0x14dc <pow+0x50>
    14d2:	ab 2f       	mov	r26, r27
    14d4:	be 2f       	mov	r27, r30
    14d6:	f8 5f       	subi	r31, 0xF8	; 248
    14d8:	d0 f3       	brcs	.-12     	; 0x14ce <pow+0x42>
    14da:	10 c0       	rjmp	.+32     	; 0x14fc <pow+0x70>
    14dc:	ff 5f       	subi	r31, 0xFF	; 255
    14de:	70 f4       	brcc	.+28     	; 0x14fc <pow+0x70>
    14e0:	a6 95       	lsr	r26
    14e2:	e0 f7       	brcc	.-8      	; 0x14dc <pow+0x50>
    14e4:	f7 39       	cpi	r31, 0x97	; 151
    14e6:	50 f0       	brcs	.+20     	; 0x14fc <pow+0x70>
    14e8:	19 f0       	breq	.+6      	; 0x14f0 <pow+0x64>
    14ea:	ff 3a       	cpi	r31, 0xAF	; 175
    14ec:	38 f4       	brcc	.+14     	; 0x14fc <pow+0x70>
    14ee:	9f 77       	andi	r25, 0x7F	; 127
    14f0:	9f 93       	push	r25
    14f2:	0c d0       	rcall	.+24     	; 0x150c <pow+0x80>
    14f4:	0f 90       	pop	r0
    14f6:	07 fc       	sbrc	r0, 7
    14f8:	90 58       	subi	r25, 0x80	; 128
    14fa:	08 95       	ret
    14fc:	3e f0       	brts	.+14     	; 0x150c <pow+0x80>
    14fe:	18 cf       	rjmp	.-464    	; 0x1330 <__fp_nan>
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	80 e8       	ldi	r24, 0x80	; 128
    1506:	9f e3       	ldi	r25, 0x3F	; 63
    1508:	08 95       	ret
    150a:	4f e7       	ldi	r20, 0x7F	; 127
    150c:	9f 77       	andi	r25, 0x7F	; 127
    150e:	5f 93       	push	r21
    1510:	4f 93       	push	r20
    1512:	3f 93       	push	r19
    1514:	2f 93       	push	r18
    1516:	9e d0       	rcall	.+316    	; 0x1654 <log>
    1518:	2f 91       	pop	r18
    151a:	3f 91       	pop	r19
    151c:	4f 91       	pop	r20
    151e:	5f 91       	pop	r21
    1520:	52 df       	rcall	.-348    	; 0x13c6 <__mulsf3>
    1522:	05 c0       	rjmp	.+10     	; 0x152e <exp>
    1524:	19 f4       	brne	.+6      	; 0x152c <pow+0xa0>
    1526:	0e f0       	brts	.+2      	; 0x152a <pow+0x9e>
    1528:	fd ce       	rjmp	.-518    	; 0x1324 <__fp_inf>
    152a:	46 cf       	rjmp	.-372    	; 0x13b8 <__fp_zero>
    152c:	01 cf       	rjmp	.-510    	; 0x1330 <__fp_nan>

0000152e <exp>:
    152e:	2a df       	rcall	.-428    	; 0x1384 <__fp_splitA>
    1530:	c8 f3       	brcs	.-14     	; 0x1524 <pow+0x98>
    1532:	96 38       	cpi	r25, 0x86	; 134
    1534:	c0 f7       	brcc	.-16     	; 0x1526 <pow+0x9a>
    1536:	07 f8       	bld	r0, 7
    1538:	0f 92       	push	r0
    153a:	e8 94       	clt
    153c:	2b e3       	ldi	r18, 0x3B	; 59
    153e:	3a ea       	ldi	r19, 0xAA	; 170
    1540:	48 eb       	ldi	r20, 0xB8	; 184
    1542:	5f e7       	ldi	r21, 0x7F	; 127
    1544:	4e df       	rcall	.-356    	; 0x13e2 <__mulsf3_pse>
    1546:	0f 92       	push	r0
    1548:	0f 92       	push	r0
    154a:	0f 92       	push	r0
    154c:	4d b7       	in	r20, 0x3d	; 61
    154e:	5e b7       	in	r21, 0x3e	; 62
    1550:	0f 92       	push	r0
    1552:	c0 d0       	rcall	.+384    	; 0x16d4 <modf>
    1554:	e4 e5       	ldi	r30, 0x54	; 84
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	16 d0       	rcall	.+44     	; 0x1586 <__fp_powser>
    155a:	4f 91       	pop	r20
    155c:	5f 91       	pop	r21
    155e:	ef 91       	pop	r30
    1560:	ff 91       	pop	r31
    1562:	e5 95       	asr	r30
    1564:	ee 1f       	adc	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	49 f0       	breq	.+18     	; 0x157c <exp+0x4e>
    156a:	fe 57       	subi	r31, 0x7E	; 126
    156c:	e0 68       	ori	r30, 0x80	; 128
    156e:	44 27       	eor	r20, r20
    1570:	ee 0f       	add	r30, r30
    1572:	44 1f       	adc	r20, r20
    1574:	fa 95       	dec	r31
    1576:	e1 f7       	brne	.-8      	; 0x1570 <exp+0x42>
    1578:	41 95       	neg	r20
    157a:	55 0b       	sbc	r21, r21
    157c:	32 d0       	rcall	.+100    	; 0x15e2 <ldexp>
    157e:	0f 90       	pop	r0
    1580:	07 fe       	sbrs	r0, 7
    1582:	26 c0       	rjmp	.+76     	; 0x15d0 <inverse>
    1584:	08 95       	ret

00001586 <__fp_powser>:
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	1f 93       	push	r17
    158c:	0f 93       	push	r16
    158e:	ff 92       	push	r15
    1590:	ef 92       	push	r14
    1592:	df 92       	push	r13
    1594:	7b 01       	movw	r14, r22
    1596:	8c 01       	movw	r16, r24
    1598:	68 94       	set
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <__fp_powser+0x20>
    159c:	da 2e       	mov	r13, r26
    159e:	ef 01       	movw	r28, r30
    15a0:	1e df       	rcall	.-452    	; 0x13de <__mulsf3x>
    15a2:	fe 01       	movw	r30, r28
    15a4:	e8 94       	clt
    15a6:	a5 91       	lpm	r26, Z+
    15a8:	25 91       	lpm	r18, Z+
    15aa:	35 91       	lpm	r19, Z+
    15ac:	45 91       	lpm	r20, Z+
    15ae:	55 91       	lpm	r21, Z+
    15b0:	ae f3       	brts	.-22     	; 0x159c <__fp_powser+0x16>
    15b2:	ef 01       	movw	r28, r30
    15b4:	8e dd       	rcall	.-1252   	; 0x10d2 <__addsf3x>
    15b6:	fe 01       	movw	r30, r28
    15b8:	97 01       	movw	r18, r14
    15ba:	a8 01       	movw	r20, r16
    15bc:	da 94       	dec	r13
    15be:	79 f7       	brne	.-34     	; 0x159e <__fp_powser+0x18>
    15c0:	df 90       	pop	r13
    15c2:	ef 90       	pop	r14
    15c4:	ff 90       	pop	r15
    15c6:	0f 91       	pop	r16
    15c8:	1f 91       	pop	r17
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <inverse>:
    15d0:	9b 01       	movw	r18, r22
    15d2:	ac 01       	movw	r20, r24
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	80 e8       	ldi	r24, 0x80	; 128
    15da:	9f e3       	ldi	r25, 0x3F	; 63
    15dc:	cd cd       	rjmp	.-1126   	; 0x1178 <__divsf3>
    15de:	a2 ce       	rjmp	.-700    	; 0x1324 <__fp_inf>
    15e0:	ac c0       	rjmp	.+344    	; 0x173a <__fp_mpack>

000015e2 <ldexp>:
    15e2:	d0 de       	rcall	.-608    	; 0x1384 <__fp_splitA>
    15e4:	e8 f3       	brcs	.-6      	; 0x15e0 <inverse+0x10>
    15e6:	99 23       	and	r25, r25
    15e8:	d9 f3       	breq	.-10     	; 0x15e0 <inverse+0x10>
    15ea:	94 0f       	add	r25, r20
    15ec:	51 1d       	adc	r21, r1
    15ee:	bb f3       	brvs	.-18     	; 0x15de <inverse+0xe>
    15f0:	91 50       	subi	r25, 0x01	; 1
    15f2:	50 40       	sbci	r21, 0x00	; 0
    15f4:	94 f0       	brlt	.+36     	; 0x161a <ldexp+0x38>
    15f6:	59 f0       	breq	.+22     	; 0x160e <ldexp+0x2c>
    15f8:	88 23       	and	r24, r24
    15fa:	32 f0       	brmi	.+12     	; 0x1608 <ldexp+0x26>
    15fc:	66 0f       	add	r22, r22
    15fe:	77 1f       	adc	r23, r23
    1600:	88 1f       	adc	r24, r24
    1602:	91 50       	subi	r25, 0x01	; 1
    1604:	50 40       	sbci	r21, 0x00	; 0
    1606:	c1 f7       	brne	.-16     	; 0x15f8 <ldexp+0x16>
    1608:	9e 3f       	cpi	r25, 0xFE	; 254
    160a:	51 05       	cpc	r21, r1
    160c:	44 f7       	brge	.-48     	; 0x15de <inverse+0xe>
    160e:	88 0f       	add	r24, r24
    1610:	91 1d       	adc	r25, r1
    1612:	96 95       	lsr	r25
    1614:	87 95       	ror	r24
    1616:	97 f9       	bld	r25, 7
    1618:	08 95       	ret
    161a:	5f 3f       	cpi	r21, 0xFF	; 255
    161c:	ac f0       	brlt	.+42     	; 0x1648 <ldexp+0x66>
    161e:	98 3e       	cpi	r25, 0xE8	; 232
    1620:	9c f0       	brlt	.+38     	; 0x1648 <ldexp+0x66>
    1622:	bb 27       	eor	r27, r27
    1624:	86 95       	lsr	r24
    1626:	77 95       	ror	r23
    1628:	67 95       	ror	r22
    162a:	b7 95       	ror	r27
    162c:	08 f4       	brcc	.+2      	; 0x1630 <ldexp+0x4e>
    162e:	b1 60       	ori	r27, 0x01	; 1
    1630:	93 95       	inc	r25
    1632:	c1 f7       	brne	.-16     	; 0x1624 <ldexp+0x42>
    1634:	bb 0f       	add	r27, r27
    1636:	58 f7       	brcc	.-42     	; 0x160e <ldexp+0x2c>
    1638:	11 f4       	brne	.+4      	; 0x163e <ldexp+0x5c>
    163a:	60 ff       	sbrs	r22, 0
    163c:	e8 cf       	rjmp	.-48     	; 0x160e <ldexp+0x2c>
    163e:	6f 5f       	subi	r22, 0xFF	; 255
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	8f 4f       	sbci	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	e3 cf       	rjmp	.-58     	; 0x160e <ldexp+0x2c>
    1648:	b8 ce       	rjmp	.-656    	; 0x13ba <__fp_szero>
    164a:	0e f0       	brts	.+2      	; 0x164e <ldexp+0x6c>
    164c:	76 c0       	rjmp	.+236    	; 0x173a <__fp_mpack>
    164e:	70 ce       	rjmp	.-800    	; 0x1330 <__fp_nan>
    1650:	68 94       	set
    1652:	68 ce       	rjmp	.-816    	; 0x1324 <__fp_inf>

00001654 <log>:
    1654:	97 de       	rcall	.-722    	; 0x1384 <__fp_splitA>
    1656:	c8 f3       	brcs	.-14     	; 0x164a <ldexp+0x68>
    1658:	99 23       	and	r25, r25
    165a:	d1 f3       	breq	.-12     	; 0x1650 <ldexp+0x6e>
    165c:	c6 f3       	brts	.-16     	; 0x164e <ldexp+0x6c>
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	1f 93       	push	r17
    1664:	0f 93       	push	r16
    1666:	ff 92       	push	r15
    1668:	c9 2f       	mov	r28, r25
    166a:	dd 27       	eor	r29, r29
    166c:	88 23       	and	r24, r24
    166e:	2a f0       	brmi	.+10     	; 0x167a <log+0x26>
    1670:	21 97       	sbiw	r28, 0x01	; 1
    1672:	66 0f       	add	r22, r22
    1674:	77 1f       	adc	r23, r23
    1676:	88 1f       	adc	r24, r24
    1678:	da f7       	brpl	.-10     	; 0x1670 <log+0x1c>
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e8       	ldi	r20, 0x80	; 128
    1680:	5f eb       	ldi	r21, 0xBF	; 191
    1682:	9f e3       	ldi	r25, 0x3F	; 63
    1684:	88 39       	cpi	r24, 0x98	; 152
    1686:	20 f0       	brcs	.+8      	; 0x1690 <log+0x3c>
    1688:	80 3e       	cpi	r24, 0xE0	; 224
    168a:	30 f0       	brcs	.+12     	; 0x1698 <log+0x44>
    168c:	21 96       	adiw	r28, 0x01	; 1
    168e:	8f 77       	andi	r24, 0x7F	; 127
    1690:	0f dd       	rcall	.-1506   	; 0x10b0 <__addsf3>
    1692:	ec e7       	ldi	r30, 0x7C	; 124
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	03 c0       	rjmp	.+6      	; 0x169e <log+0x4a>
    1698:	0b dd       	rcall	.-1514   	; 0x10b0 <__addsf3>
    169a:	e9 ea       	ldi	r30, 0xA9	; 169
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	73 df       	rcall	.-282    	; 0x1586 <__fp_powser>
    16a0:	8b 01       	movw	r16, r22
    16a2:	be 01       	movw	r22, r28
    16a4:	ec 01       	movw	r28, r24
    16a6:	fb 2e       	mov	r15, r27
    16a8:	6f 57       	subi	r22, 0x7F	; 127
    16aa:	71 09       	sbc	r23, r1
    16ac:	75 95       	asr	r23
    16ae:	77 1f       	adc	r23, r23
    16b0:	88 0b       	sbc	r24, r24
    16b2:	99 0b       	sbc	r25, r25
    16b4:	fc dd       	rcall	.-1032   	; 0x12ae <__floatsisf>
    16b6:	28 e1       	ldi	r18, 0x18	; 24
    16b8:	32 e7       	ldi	r19, 0x72	; 114
    16ba:	41 e3       	ldi	r20, 0x31	; 49
    16bc:	5f e3       	ldi	r21, 0x3F	; 63
    16be:	8f de       	rcall	.-738    	; 0x13de <__mulsf3x>
    16c0:	af 2d       	mov	r26, r15
    16c2:	98 01       	movw	r18, r16
    16c4:	ae 01       	movw	r20, r28
    16c6:	ff 90       	pop	r15
    16c8:	0f 91       	pop	r16
    16ca:	1f 91       	pop	r17
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	00 dd       	rcall	.-1536   	; 0x10d2 <__addsf3x>
    16d2:	3f ce       	rjmp	.-898    	; 0x1352 <__fp_round>

000016d4 <modf>:
    16d4:	fa 01       	movw	r30, r20
    16d6:	dc 01       	movw	r26, r24
    16d8:	aa 0f       	add	r26, r26
    16da:	bb 1f       	adc	r27, r27
    16dc:	9b 01       	movw	r18, r22
    16de:	ac 01       	movw	r20, r24
    16e0:	bf 57       	subi	r27, 0x7F	; 127
    16e2:	28 f4       	brcc	.+10     	; 0x16ee <modf+0x1a>
    16e4:	22 27       	eor	r18, r18
    16e6:	33 27       	eor	r19, r19
    16e8:	44 27       	eor	r20, r20
    16ea:	50 78       	andi	r21, 0x80	; 128
    16ec:	1f c0       	rjmp	.+62     	; 0x172c <modf+0x58>
    16ee:	b7 51       	subi	r27, 0x17	; 23
    16f0:	88 f4       	brcc	.+34     	; 0x1714 <modf+0x40>
    16f2:	ab 2f       	mov	r26, r27
    16f4:	00 24       	eor	r0, r0
    16f6:	46 95       	lsr	r20
    16f8:	37 95       	ror	r19
    16fa:	27 95       	ror	r18
    16fc:	01 1c       	adc	r0, r1
    16fe:	a3 95       	inc	r26
    1700:	d2 f3       	brmi	.-12     	; 0x16f6 <modf+0x22>
    1702:	00 20       	and	r0, r0
    1704:	69 f0       	breq	.+26     	; 0x1720 <modf+0x4c>
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	b3 95       	inc	r27
    170e:	da f3       	brmi	.-10     	; 0x1706 <modf+0x32>
    1710:	0d d0       	rcall	.+26     	; 0x172c <modf+0x58>
    1712:	cd cc       	rjmp	.-1638   	; 0x10ae <__subsf3>
    1714:	61 30       	cpi	r22, 0x01	; 1
    1716:	71 05       	cpc	r23, r1
    1718:	a0 e8       	ldi	r26, 0x80	; 128
    171a:	8a 07       	cpc	r24, r26
    171c:	b9 46       	sbci	r27, 0x69	; 105
    171e:	30 f4       	brcc	.+12     	; 0x172c <modf+0x58>
    1720:	9b 01       	movw	r18, r22
    1722:	ac 01       	movw	r20, r24
    1724:	66 27       	eor	r22, r22
    1726:	77 27       	eor	r23, r23
    1728:	88 27       	eor	r24, r24
    172a:	90 78       	andi	r25, 0x80	; 128
    172c:	30 96       	adiw	r30, 0x00	; 0
    172e:	21 f0       	breq	.+8      	; 0x1738 <modf+0x64>
    1730:	20 83       	st	Z, r18
    1732:	31 83       	std	Z+1, r19	; 0x01
    1734:	42 83       	std	Z+2, r20	; 0x02
    1736:	53 83       	std	Z+3, r21	; 0x03
    1738:	08 95       	ret

0000173a <__fp_mpack>:
    173a:	9f 3f       	cpi	r25, 0xFF	; 255
    173c:	31 f0       	breq	.+12     	; 0x174a <__fp_mpack_finite+0xc>

0000173e <__fp_mpack_finite>:
    173e:	91 50       	subi	r25, 0x01	; 1
    1740:	20 f4       	brcc	.+8      	; 0x174a <__fp_mpack_finite+0xc>
    1742:	87 95       	ror	r24
    1744:	77 95       	ror	r23
    1746:	67 95       	ror	r22
    1748:	b7 95       	ror	r27
    174a:	88 0f       	add	r24, r24
    174c:	91 1d       	adc	r25, r1
    174e:	96 95       	lsr	r25
    1750:	87 95       	ror	r24
    1752:	97 f9       	bld	r25, 7
    1754:	08 95       	ret

00001756 <__mulsi3>:
    1756:	62 9f       	mul	r22, r18
    1758:	d0 01       	movw	r26, r0
    175a:	73 9f       	mul	r23, r19
    175c:	f0 01       	movw	r30, r0
    175e:	82 9f       	mul	r24, r18
    1760:	e0 0d       	add	r30, r0
    1762:	f1 1d       	adc	r31, r1
    1764:	64 9f       	mul	r22, r20
    1766:	e0 0d       	add	r30, r0
    1768:	f1 1d       	adc	r31, r1
    176a:	92 9f       	mul	r25, r18
    176c:	f0 0d       	add	r31, r0
    176e:	83 9f       	mul	r24, r19
    1770:	f0 0d       	add	r31, r0
    1772:	74 9f       	mul	r23, r20
    1774:	f0 0d       	add	r31, r0
    1776:	65 9f       	mul	r22, r21
    1778:	f0 0d       	add	r31, r0
    177a:	99 27       	eor	r25, r25
    177c:	72 9f       	mul	r23, r18
    177e:	b0 0d       	add	r27, r0
    1780:	e1 1d       	adc	r30, r1
    1782:	f9 1f       	adc	r31, r25
    1784:	63 9f       	mul	r22, r19
    1786:	b0 0d       	add	r27, r0
    1788:	e1 1d       	adc	r30, r1
    178a:	f9 1f       	adc	r31, r25
    178c:	bd 01       	movw	r22, r26
    178e:	cf 01       	movw	r24, r30
    1790:	11 24       	eor	r1, r1
    1792:	08 95       	ret

00001794 <__divmodhi4>:
    1794:	97 fb       	bst	r25, 7
    1796:	09 2e       	mov	r0, r25
    1798:	07 26       	eor	r0, r23
    179a:	0a d0       	rcall	.+20     	; 0x17b0 <__divmodhi4_neg1>
    179c:	77 fd       	sbrc	r23, 7
    179e:	04 d0       	rcall	.+8      	; 0x17a8 <__divmodhi4_neg2>
    17a0:	27 d0       	rcall	.+78     	; 0x17f0 <__udivmodhi4>
    17a2:	06 d0       	rcall	.+12     	; 0x17b0 <__divmodhi4_neg1>
    17a4:	00 20       	and	r0, r0
    17a6:	1a f4       	brpl	.+6      	; 0x17ae <__divmodhi4_exit>

000017a8 <__divmodhi4_neg2>:
    17a8:	70 95       	com	r23
    17aa:	61 95       	neg	r22
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255

000017ae <__divmodhi4_exit>:
    17ae:	08 95       	ret

000017b0 <__divmodhi4_neg1>:
    17b0:	f6 f7       	brtc	.-4      	; 0x17ae <__divmodhi4_exit>
    17b2:	90 95       	com	r25
    17b4:	81 95       	neg	r24
    17b6:	9f 4f       	sbci	r25, 0xFF	; 255
    17b8:	08 95       	ret

000017ba <__divmodsi4>:
    17ba:	97 fb       	bst	r25, 7
    17bc:	09 2e       	mov	r0, r25
    17be:	05 26       	eor	r0, r21
    17c0:	0e d0       	rcall	.+28     	; 0x17de <__divmodsi4_neg1>
    17c2:	57 fd       	sbrc	r21, 7
    17c4:	04 d0       	rcall	.+8      	; 0x17ce <__divmodsi4_neg2>
    17c6:	28 d0       	rcall	.+80     	; 0x1818 <__udivmodsi4>
    17c8:	0a d0       	rcall	.+20     	; 0x17de <__divmodsi4_neg1>
    17ca:	00 1c       	adc	r0, r0
    17cc:	38 f4       	brcc	.+14     	; 0x17dc <__divmodsi4_exit>

000017ce <__divmodsi4_neg2>:
    17ce:	50 95       	com	r21
    17d0:	40 95       	com	r20
    17d2:	30 95       	com	r19
    17d4:	21 95       	neg	r18
    17d6:	3f 4f       	sbci	r19, 0xFF	; 255
    17d8:	4f 4f       	sbci	r20, 0xFF	; 255
    17da:	5f 4f       	sbci	r21, 0xFF	; 255

000017dc <__divmodsi4_exit>:
    17dc:	08 95       	ret

000017de <__divmodsi4_neg1>:
    17de:	f6 f7       	brtc	.-4      	; 0x17dc <__divmodsi4_exit>
    17e0:	90 95       	com	r25
    17e2:	80 95       	com	r24
    17e4:	70 95       	com	r23
    17e6:	61 95       	neg	r22
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	8f 4f       	sbci	r24, 0xFF	; 255
    17ec:	9f 4f       	sbci	r25, 0xFF	; 255
    17ee:	08 95       	ret

000017f0 <__udivmodhi4>:
    17f0:	aa 1b       	sub	r26, r26
    17f2:	bb 1b       	sub	r27, r27
    17f4:	51 e1       	ldi	r21, 0x11	; 17
    17f6:	07 c0       	rjmp	.+14     	; 0x1806 <__udivmodhi4_ep>

000017f8 <__udivmodhi4_loop>:
    17f8:	aa 1f       	adc	r26, r26
    17fa:	bb 1f       	adc	r27, r27
    17fc:	a6 17       	cp	r26, r22
    17fe:	b7 07       	cpc	r27, r23
    1800:	10 f0       	brcs	.+4      	; 0x1806 <__udivmodhi4_ep>
    1802:	a6 1b       	sub	r26, r22
    1804:	b7 0b       	sbc	r27, r23

00001806 <__udivmodhi4_ep>:
    1806:	88 1f       	adc	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	5a 95       	dec	r21
    180c:	a9 f7       	brne	.-22     	; 0x17f8 <__udivmodhi4_loop>
    180e:	80 95       	com	r24
    1810:	90 95       	com	r25
    1812:	bc 01       	movw	r22, r24
    1814:	cd 01       	movw	r24, r26
    1816:	08 95       	ret

00001818 <__udivmodsi4>:
    1818:	a1 e2       	ldi	r26, 0x21	; 33
    181a:	1a 2e       	mov	r1, r26
    181c:	aa 1b       	sub	r26, r26
    181e:	bb 1b       	sub	r27, r27
    1820:	fd 01       	movw	r30, r26
    1822:	0d c0       	rjmp	.+26     	; 0x183e <__udivmodsi4_ep>

00001824 <__udivmodsi4_loop>:
    1824:	aa 1f       	adc	r26, r26
    1826:	bb 1f       	adc	r27, r27
    1828:	ee 1f       	adc	r30, r30
    182a:	ff 1f       	adc	r31, r31
    182c:	a2 17       	cp	r26, r18
    182e:	b3 07       	cpc	r27, r19
    1830:	e4 07       	cpc	r30, r20
    1832:	f5 07       	cpc	r31, r21
    1834:	20 f0       	brcs	.+8      	; 0x183e <__udivmodsi4_ep>
    1836:	a2 1b       	sub	r26, r18
    1838:	b3 0b       	sbc	r27, r19
    183a:	e4 0b       	sbc	r30, r20
    183c:	f5 0b       	sbc	r31, r21

0000183e <__udivmodsi4_ep>:
    183e:	66 1f       	adc	r22, r22
    1840:	77 1f       	adc	r23, r23
    1842:	88 1f       	adc	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	1a 94       	dec	r1
    1848:	69 f7       	brne	.-38     	; 0x1824 <__udivmodsi4_loop>
    184a:	60 95       	com	r22
    184c:	70 95       	com	r23
    184e:	80 95       	com	r24
    1850:	90 95       	com	r25
    1852:	9b 01       	movw	r18, r22
    1854:	ac 01       	movw	r20, r24
    1856:	bd 01       	movw	r22, r26
    1858:	cf 01       	movw	r24, r30
    185a:	08 95       	ret

0000185c <_exit>:
    185c:	f8 94       	cli

0000185e <__stop_program>:
    185e:	ff cf       	rjmp	.-2      	; 0x185e <__stop_program>
